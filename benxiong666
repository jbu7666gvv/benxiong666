-- 环境检查和安全函数定义
local function safeRequire(func, fallback)
    local success, result = pcall(func)
    return success and result or fallback
end

-- 缓存常用函数
local task_wait = task.wait
local collectgarbage_collect = collectgarbage
local loadstring = loadstring or load

-- 改进的 HTTP 获取函数
local function httpGet(url)
    local success, result = pcall(function()
        -- 方法1: 标准HttpGet
        if game and game.HttpGet then
            return game:HttpGet(url, true)
        -- 方法2: Synapse
        elseif syn and syn.request then
            local response = syn.request({
                Url = url,
                Method = "GET",
                Timeout = 10
            })
            return response.Body
        -- 方法3: KRNL/其他执行器
        elseif request then
            local response = request({
                Url = url,
                Method = "GET"
            })
            return response.Body
        -- 方法4: Fluxus
        elseif fluxus and fluxus.request then
            local response = fluxus.request({
                Url = url,
                Method = "GET"
            })
            return response.Body
        else
            error("没有可用的 HTTP 方法")
        end
    end)
    
    if success and result and #result > 100 then -- 确保有足够的内容
        return result
    else
        return nil
    end
end

-- 备用简化UI（当WindUI加载失败时使用）
local function loadFallbackUI()
    print("使用备用简化UI")
    
    local FallbackUI = {}
    
    function FallbackUI:Notify(options)
        pcall(function()
            game:GetService("StarterGui"):SetCore("SendNotification", {
                Title = options.Title or "通知",
                Text = options.Content or "",
                Duration = options.Duration or 5
            })
        end)
        print("通知: " .. (options.Title or "") .. " - " .. (options.Content or ""))
    end
    
    function FallbackUI:Popup(options)
        self:Notify({
            Title = options.Title or "弹窗",
            Content = options.Content or "",
            Duration = 10
        })
        
        if options.Buttons then
            for _, btn in ipairs(options.Buttons) do
                if btn.Title == "验证" and btn.Callback then
                    -- 模拟输入验证
                    btn.Callback({[1] = "秋容"})
                    break
                end
            end
        end
    end
    
    -- 其他必要的方法
    function FallbackUI:CreateWindow() 
        local window = {}
        function window:Tab() return self end
        function window:Section() return self end
        function window:Button() return self end
        function window:Paragraph() return self end
        function window:SelectTab() end
        function window:CreateTopbarButton() return self end
        function window:EditOpenButton() end
        function window:ToggleFullscreen() end
        function window:Destroy() end
        return window
    end
    
    function FallbackUI:Tab() return self end
    function FallbackUI:Section() return self end
    function FallbackUI:Button() return self end
    function FallbackUI:Paragraph() return self end
    
    return FallbackUI
end

-- 简化的 WindUI 加载函数
local function loadWindUISafely()
    -- 使用更可靠的源
    local sources = {
        "https://raw.githubusercontent.com/Footagesus/WindUI/main/src/main.lua",
        "https://cdn.jsdelivr.net/gh/Footagesus/WindUI@main/src/main.lua",
    }
    
    for i, url in ipairs(sources) do
        print("尝试源 " .. i .. ": " .. url)
        local source = httpGet(url)
        if source then
            print("成功获取源 " .. i .. ", 长度: " .. #source)
            local success, lib = pcall(loadstring, source)
            if success and lib then
                print("WindUI 加载成功")
                return lib()
            else
                print("WindUI 编译失败: " .. tostring(lib))
            end
        else
            print("源 " .. i .. " 请求失败")
        end
        task_wait(1) -- 请求间隔
    end
    
    -- 如果所有在线源都失败，使用内置简化UI
    return loadFallbackUI()
end

-- 加载 WindUI 库
local WindUISuccess, WindUI = pcall(loadWindUISafely)

if not WindUISuccess or not WindUI then
    -- 使用备用UI
    WindUI = loadFallbackUI()
    WindUI:Notify({
        Title = "本熊汉化 - 简化模式", 
        Content = "WindUI加载失败，使用简化界面。功能可能受限。",
        Duration = 5
    })
end

-- 给UI库初始化时间
task_wait(1)

-- 颜色常量
local COLORS = {
    GRADIENT_START = Color3.fromHex("#00FF87"),
    GRADIENT_END = Color3.fromHex("#60EFFF"),
    BUTTON_START = Color3.fromHex("#FF0F7B"),
    BUTTON_END = Color3.fromHex("#F89B29")
}

-- 图标常量
local KEY_ICON = " 🔑"
local CHECK_ICON = " ✅"

-- 安全调用函数
local function safeCall(func, errorMessage)
    local success, err = pcall(func)
    if not success then
        if WindUI then
            WindUI:Notify({Title = "错误", Content = errorMessage .. ": " .. tostring(err), Duration = 5})
        end
    end
    return success
end

-- 安全的剪贴板操作
local function safeSetClipboard(text)
    local success, err = pcall(function()
        if setclipboard then
            setclipboard(text)
        elseif syn and syn.write_clipboard then
            syn.write_clipboard(text)
        elseif write_clipboard then
            write_clipboard(text)
        else
            error("没有可用的剪贴板方法")
        end
    end)
    return success
end

-- 密钥验证系统
local KeySystem = {
    ValidKeys = {"秋容", "本熊汉化", "WindUI"},
    CurrentKey = nil,
    IsValid = false
}

-- 密钥验证函数
local function validateKey(inputKey)
    for _, validKey in ipairs(KeySystem.ValidKeys) do
        if inputKey == validKey then
            KeySystem.CurrentKey = inputKey
            KeySystem.IsValid = true
            return true
        end
    end
    return false
end

-- 每次执行时要求输入密钥
local function requireKeyOnStart()
    local keyInput = nil
    local keyConfirmed = false
    
    WindUI:Popup({
        Title = "密钥验证",
        Icon = "rbxassetid://112682688917044",
        IconThemed = true,
        Content = "请输入密钥以使用本熊汉化\n\n点击下方按钮可复制密钥" .. KEY_ICON,
        Inputs = {
            {
                Title = "密钥",
                Placeholder = "请输入密钥...",
                Required = true
            }
        },
        Buttons = {
            {
                Title = "复制密钥",
                Callback = function() 
                    if safeSetClipboard("秋容") then
                        WindUI:Notify({Title = "提示", Content = "密钥已复制到剪贴板", Duration = 2})
                    else
                        WindUI:Notify({Title = "错误", Content = "剪贴板复制失败", Duration = 2})
                    end
                end,
                Variant = "Secondary",
            },
            {
                Title = "取消",
                Callback = function() 
                    WindUI:Notify({Title = "提示", Content = "已取消", Duration = 2})
                end,
                Variant = "Secondary",
            },
            {
                Title = "验证",
                Icon = "key",
                Callback = function(inputs) 
                    keyInput = inputs[1]
                    if validateKey(keyInput) then
                        keyConfirmed = true
                        WindUI:Notify({Title = "成功", Content = "密钥验证通过！", Duration = 2})
                    else
                        WindUI:Notify({Title = "错误", Content = "密钥无效，请重新输入", Duration = 3})
                    end
                end,
                Variant = "Primary",
            }
        }
    })
    
    repeat task_wait() until keyConfirmed
    return KeySystem.IsValid
end

-- 在创建主窗口前验证密钥
local keyValid = requireKeyOnStart()
if not keyValid then
    WindUI:Notify({Title = "错误", Content = "密钥验证失败，脚本终止", Duration = 5})
    return
end

function gradient(text, startColor, endColor)
    local result = {}
    local length = #text
    
    for i = 1, length do
        local t = (i - 1) / math.max(length - 1, 1)
        local r = math.floor((startColor.R + (endColor.R - startColor.R) * t) * 255)
        local g = math.floor((startColor.G + (endColor.G - startColor.G) * t) * 255)
        local b = math.floor((startColor.B + (endColor.B - startColor.B) * t) * 255)
        
        table.insert(result, string.format('<font color="rgb(%d,%d,%d)">%s</font>', r, g, b, text:sub(i, i)))
    end
    
    return table.concat(result)
end

local function loadScript(url, scriptName)
    -- 每次执行脚本前重新验证密钥
    if not KeySystem.IsValid then
        WindUI:Notify({Title = "错误", Content = "密钥已失效，请重新验证", Duration = 3})
        local keyValid = requireKeyOnStart()
        if not keyValid then
            WindUI:Notify({Title = "错误", Content = "密钥验证失败，无法加载脚本", Duration = 3})
            return
        end
    end
    
    WindUI:Notify({Title = "提示", Content = "正在加载 " .. scriptName .. "...", Duration = 2})
    
    local success, result = pcall(function()
        local response = httpGet(url)
        if not response or #response < 50 then
            return false, "脚本内容无效或为空"
        end
        
        local loadedFunction, loadError = loadstring(response)
        if not loadedFunction then
            return false, "脚本编译错误: " .. tostring(loadError)
        end
        
        local executeSuccess, executeError = pcall(loadedFunction)
        if not executeSuccess then
            return false, "脚本执行错误: " .. tostring(executeError)
        end
        
        return true
    end)
    
    if success and result then
        WindUI:Notify({Title = "成功", Content = scriptName .. " 加载完成", Duration = 3})
    else
        local errorMsg = success and result or "网络请求失败"
        WindUI:Notify({Title = "错误", Content = scriptName .. " 加载失败: " .. errorMsg, Duration = 5})
    end
end

local Confirmed = false

WindUI:Popup({
    Title = "欢迎使用本熊汉化",
    Icon = "rbxassetid://112682688917044",
    IconThemed = true,
    Content = "本熊汉化" .. gradient("WindUI", COLORS.GRADIENT_START, COLORS.GRADIENT_END) .. " Lib",  
    Buttons = {
        {
            Title = "退出",
            Callback = function() 
                WindUI:Notify({Title = "提示", Content = "已退出", Duration = 2})
            end,
            Variant = "Secondary",
        },
        {
            Title = "使用",
            Icon = "arrow-right",
            Callback = function() 
                Confirmed = true 
                WindUI:Notify({Title = "欢迎", Content = "开始使用本熊汉化", Duration = 2})
            end,
            Variant = "Primary",
        }
    }
})

repeat task_wait() until Confirmed

-- 创建主窗口
local Window = WindUI:CreateWindow({
    Title = "本熊汉化",
    Icon = "rbxassetid://129260712070622",
    IconThemed = true,
    Author = "本熊汉化",
    Folder = "本熊汉化",
    Size = UDim2.fromOffset(580, 460),
    Transparent = true,
    Theme = "Dark",
    User = {
        Enabled = true,
        Callback = function() 
            if safeSetClipboard("本熊汉化") then
                WindUI:Notify({Title = "提示", Content = "已复制作者信息", Duration = 2})
            else
                WindUI:Notify({Title = "错误", Content = "剪贴板复制失败", Duration = 2})
            end
        end,
        Anonymous = true
    },
    SideBarWidth = 200,
    ScrollBarEnabled = true,
    -- 移除内置的KeySystem，使用我们自定义的验证系统
    KeySystem = false
})

-- 添加重新验证按钮
Window:CreateTopbarButton("重新验证", "key", function() 
    local keyValid = requireKeyOnStart()
    if keyValid then
        WindUI:Notify({Title = "成功", Content = "密钥验证通过！", Duration = 3})
    else
        WindUI:Notify({Title = "错误", Content = "密钥验证失败", Duration = 3})
    end
end, 990)

Window:CreateTopbarButton("全屏", "battery-plus", function() 
    Window:ToggleFullscreen()
    WindUI:Notify({Title = "提示", Content = "切换全屏模式", Duration = 2})
end, 989)

Window:EditOpenButton({
    Title = "本熊汉化",
    Icon = "monitor",
    CornerRadius = UDim.new(0,16),
    StrokeThickness = 2,
    Color = ColorSequence.new(COLORS.BUTTON_START, COLORS.BUTTON_END),
    Draggable = true,
})

local Tabs = {
    Home = Window:Tab({ Title = "主页", Icon = "crown" }),
    Main = Window:Tab({ Title = "99夜", Icon = "zap" }),
    Ninja = Window:Tab({ Title = "死铁轨", Icon = "user" }),
    Oth = Window:Tab({ Title = "偷走脑红", Icon = "heart" }),
    Other = Window:Tab({ Title = "工具", Icon = "settings" })
}

Window:SelectTab(1)

Tabs.Home:Paragraph({
    Title = "欢迎使用本熊汉化",
    Desc = "专为Roblox脚本汉化 - 密钥验证系统已启用",
})

Tabs.Home:Paragraph({
    Title = "更新内容",
    Desc = "• 增加了偷走脑红汉化，优化了界面\n• 新增每次执行时的密钥验证系统",
})

Tabs.Home:Section({Title = "主页"})

Tabs.Home:Button({
    Title = "复制QQ群号",
    Callback = function()
        if safeSetClipboard("168985587") then
            WindUI:Notify({Title = "QQ群号", Content = "群号已复制到剪贴板", Duration = 3})
        else
            WindUI:Notify({Title = "错误", Content = "剪贴板复制失败", Duration = 3})
        end
    end
})

Tabs.Home:Button({
    Title = "复制老鼠快手号",
    Callback = function()
        if safeSetClipboard("lousun7891") then
            WindUI:Notify({Title = "快手号", Content = "快手号已复制到剪贴板", Duration = 3})
        else
            WindUI:Notify({Title = "错误", Content = "剪贴板复制失败", Duration = 3})
        end
    end
})

Tabs.Home:Section({Title = "工具"})

Tabs.Home:Button({
    Title = "重新加载界面",
    Callback = function()
        WindUI:Notify({Title = "提示", Content = "重新加载界面中...", Duration = 2})
        
        -- 保存重要信息
        local savedData = {
            keySystemEnabled = true,
            key = KeySystem.CurrentKey
        }
        
        -- 延迟执行以确保通知显示
        task.wait(1)
        
        -- 完全清理UI
        if Window then
            pcall(function() Window:Destroy() end)
            Window = nil
        end
        
        -- 强制垃圾回收
        for i = 1, 5 do
            task.wait(0.1)
            collectgarbage("collect")
        end
        
        -- 使用游戏的重置功能（更可靠的方法）
        if game:GetService("CoreGui"):FindFirstChild("WindUI") then
            game:GetService("CoreGui").WindUI:Destroy()
        end
        
        -- 重新执行脚本的替代方案
        task.wait(0.5)
        
        -- 方法1：尝试通过重新获取脚本来重启
        local success, result = pcall(function()
            local restartScript = httpGet("https://raw.githubusercontent.com/jbu7666gvv/benhan/main/benhan.lua")
            if restartScript then
                -- 创建新的脚本来执行
                local newScript = Instance.new("LocalScript")
                newScript.Source = restartScript
                newScript.Parent = game:GetService("Players").LocalPlayer:WaitForChild("PlayerScripts")
            else
                error("无法获取重启脚本")
            end
        end)
        
        if not success then
            -- 方法2：简单的重新初始化
            WindUI:Notify({Title = "错误", Content = "完全重启失败，请手动重新执行脚本", Duration = 5})
        end
    end
})

Tabs.Main:Section({Title = "99夜脚本"})

local mainScripts = {
    {
        Title = "h4x (要卡密)",
        Desc = "汉化",
        URL = "https://raw.githubusercontent.com/jbu7666gvv/h4x6/refs/heads/main/h4x%E6%B1%89%E5%8C%96",
        RequiresKey = true
    },
    {
        Title = "虚空 (无卡密)", 
        Desc = "汉化",
        URL = "https://raw.githubusercontent.com/jbu7666gvv/xuu/refs/heads/main/xuu",
        RequiresKey = false
    },
    {
        Title = "ToastyXD Hub (要卡密)",
        Desc = "汉化版ToastyXD Hub",
        URL = "https://raw.githubusercontent.com/jbu7666gvv/toastyxdhub/refs/heads/main/toastyxdhub",
        RequiresKey = true
    },
    {
        Title = "LunorLounge (要卡密)",
        Desc = "半汉化版 - 已停止更新",
        URL = "https://raw.githubusercontent.com/jbu7666gvv/LunorLounge/refs/heads/main/LunorLounge",
        RequiresKey = true
    },
    {
        Title = "CpsHub(无卡密)",
        Desc = "汉化",
        URL = "https://raw.githubusercontent.com/jbu7666gvv/CpsHub/refs/heads/main/CpsHub",
        RequiresKey = true
    }
}

for i, scriptInfo in ipairs(mainScripts) do
    Tabs.Main:Button({
        Title = scriptInfo.Title .. (scriptInfo.RequiresKey and KEY_ICON or CHECK_ICON),
        Desc = scriptInfo.Desc,
        Callback = function()
            loadScript(scriptInfo.URL, scriptInfo.Title)
        end
    })
end

Tabs.Ninja:Section({Title = "死铁轨"})

Tabs.Ninja:Button({
    Title = "RINGTA (无卡密)" .. CHECK_ICON,
    Desc = "汉化",
    Callback = function()
        loadScript("https://raw.githubusercontent.com/jbu7666gvv/ringtasi/main/ringtasi", "RINGTA脚本")
    end
})

Tabs.Oth:Section({Title = "偷走脑红"})

Tabs.Oth:Button({
    Title = "MIRANDA HUB (无卡密)" .. CHECK_ICON,
    Desc = "汉化",
    Callback = function()
        WindUI:Notify({Title = "提示", Content = "正在加载脚本...", Duration = 2})
        loadScript("https://raw.githubusercontent.com/jbu7666gvv/jianhan/refs/heads/main/1", "MIRANDA HUB脚本")
    end
})

Tabs.Other:Section({Title = "密钥管理"})

Tabs.Other:Button({
    Title = "重新验证密钥",
    Desc = "重新输入密钥进行验证",
    Callback = function()
        local keyValid = requireKeyOnStart()
        if keyValid then
            WindUI:Notify({Title = "成功", Content = "密钥验证通过！", Duration = 3})
        else
            WindUI:Notify({Title = "错误", Content = "密钥验证失败", Duration = 3})
        end
    end
})

Tabs.Other:Button({
    Title = "查看当前密钥状态",
    Desc = "显示当前密钥验证状态",
    Callback = function()
        if KeySystem.IsValid then
            WindUI:Notify({
                Title = "密钥状态", 
                Content = "✅ 密钥已验证\n当前密钥: " .. (KeySystem.CurrentKey or "未知"),
                Duration = 5
            })
        else
            WindUI:Notify({
                Title = "密钥状态", 
                Content = "❌ 密钥未验证或已失效",
                Duration = 5
            })
        end
    end
})

WindUI:Notify({
    Title = "本熊汉化", 
    Content = "界面加载完成！密钥验证通过，请选择需要的脚本。",
    Duration = 4
})
