local Players = game:GetService("Players")
local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")
local CoreGui = game:GetService("CoreGui")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

-- 将词典拆分成多个部分
local translationDictParts = {
    -- 第一部分：核心游戏对象
    part1 = {
        ["Player"] = "玩家",
        ["NPC"] = "NPC",
        ["Enemy"] = "敌人",
        ["Boss"] = "首领",
        ["Vehicle"] = "载具",
        ["Pet"] = "宠物",
        ["Building"] = "建筑",
        ["Tree"] = "树木",
        ["Big Tree"] = "大树",
        ["Rock"] = "岩石",
        ["Chest"] = "宝箱",
        ["Loot"] = "战利品",
        ["Resource"] = "资源",
        ["Weapon"] = "武器",
        ["Tool"] = "工具",
        ["Item"] = "物品",
        ["Child"] = "子对象",
        ["Entity"] = "实体",
        ["Map"] = "地图",
        ["Structure"] = "结构",
        ["Base"] = "基地",
        ["House"] = "房子",
        ["Shop"] = "商店",
        ["Market"] = "市场",
        ["Arena"] = "竞技场",
        ["Dungeon"] = "地下城",
        ["Cave"] = "洞穴",
        ["Mountain"] = "山脉",
        ["River"] = "河流",
        ["Lake"] = "湖泊",
        ["Ocean"] = "海洋",
        ["Island"] = "岛屿",
        ["Forest"] = "森林",
        ["Desert"] = "沙漠",
        ["Snow"] = "雪地",
        ["Lava"] = "熔岩",
        ["Sky"] = "天空",
        ["Space"] = "太空",
        ["Flower"] = "花朵",
        ["Campfire"] = "营火",
        ["Reward"] = "奖励",
        ["Drop"] = "掉落",
        ["Material"] = "材料",
        ["Armor"] = "护甲",
        ["Gadget"] = "小工具",
        ["Monster"] = "怪物",
        ["Creature"] = "生物",
        ["Animal"] = "动物",
        ["Model"] = "模型",
        ["Mesh"] = "网格",
        ["Part"] = "部件",
        ["BasePart"] = "基础部件",
        ["Warm Place"] = "温暖地点",
        ["Camp"] = "营地",
        ["Fishing Hut"] = "钓鱼小屋",
    },

    -- 第二部分：游戏机制
    part2 = {
        ["Health"] = "生命值",
        ["Stamina"] = "耐力",
        ["Mana"] = "法力",
        ["Experience"] = "经验",
        ["Level"] = "等级",
        ["Damage"] = "伤害",
        ["Defense"] = "防御",
        ["Critical"] = "暴击",
        ["Dodge"] = "闪避",
        ["Respawn"] = "重生",
        ["Spawn"] = "生成",
        ["Despawn"] = "消失",
        ["Cooldown"] = "冷却",
        ["Buff"] = "增益",
        ["Debuff"] = "减益",
        ["Status Effect"] = "状态效果",
        ["Hitbox"] = "碰撞箱",
        ["Physics"] = "物理",
        ["Collision"] = "碰撞",
        ["Skill"] = "技能",
        ["Talent"] = "天赋",
        ["Perk"] = "特权",
        ["Attack"] = "攻击",
        ["Power"] = "力量",
        ["Strength"] = "力量",
        ["Agility"] = "敏捷",
        ["Intelligence"] = "智力",
        ["Luck"] = "幸运",
        ["Time"] = "时间",
        ["Day"] = "白天",
        ["Night"] = "夜晚",
        ["Weather"] = "天气",
        ["Season"] = "季节",
        ["Temperature"] = "温度",
        ["Hunger"] = "饥饿",
        ["Thirst"] = "口渴",
        ["Warmth"] = "温暖",
        ["Fishing"] = "钓鱼",
        ["Success Rate"] = "成功率",
        ["Animation"] = "动画",
        ["Effect"] = "效果",
        ["Particle"] = "粒子",
        ["Light"] = "光线",
        ["Shadow"] = "阴影",
        ["Texture"] = "纹理",
        ["Sound"] = "声音",
        ["Music"] = "音乐",
    },

    -- 第三部分：界面元素
    part3 = {
        ["Menu"] = "菜单",
        ["Button"] = "按钮",
        ["Slider"] = "滑块",
        ["Toggle"] = "开关",
        ["Dropdown"] = "下拉菜单",
        ["Input"] = "输入框",
        ["Checkbox"] = "复选框",
        ["Keybind"] = "按键绑定",
        ["Color Picker"] = "颜色选择器",
        ["Tab"] = "标签页",
        ["Window"] = "窗口",
        ["Panel"] = "面板",
        ["Notification"] = "通知",
        ["Tooltip"] = "工具提示",
        ["Watermark"] = "水印",
        ["List"] = "列表",
        ["Radio"] = "单选按钮",
        ["Frame"] = "框架",
        ["Label"] = "标签",
        ["Text"] = "文本",
        ["Image"] = "图像",
        ["Icon"] = "图标",
        ["Progress Bar"] = "进度条",
        ["Scroll"] = "滚动",
        ["Grid"] = "网格",
        ["Layout"] = "布局",
        ["Container"] = "容器",
        ["Dialog"] = "对话框",
        ["Popup"] = "弹出窗口",
        ["Alert"] = "警报",
        ["Message"] = "消息",
        ["Chat"] = "聊天",
        ["Inventory"] = "物品栏",
        ["Equipment"] = "装备栏",
        ["Skills"] = "技能栏",
        ["Quests"] = "任务栏",
        ["Minimap"] = "小地图",
        ["Radar"] = "雷达",
        ["Compass"] = "指南针",
        ["HUD"] = "平视显示器",
        ["UI"] = "用户界面",
        ["GUI"] = "图形用户界面",
        ["Submenu"] = "子菜单",
        ["Context Menu"] = "上下文菜单",
        ["Navigation"] = "导航",
        ["Header"] = "头部",
        ["Footer"] = "底部",
        ["Sidebar"] = "侧边栏",
        ["Main Content"] = "主要内容",
    },

    -- 第四部分：状态和核心功能
    part4 = {
        ["Enabled"] = "已启用",
        ["Disabled"] = "已禁用",
        ["Active"] = "活跃中",
        ["Inactive"] = "未激活",
        ["Loading"] = "加载中",
        ["Processing"] = "处理中",
        ["Connecting"] = "连接中",
        ["Injecting"] = "注入中",
        ["Bypassing"] = "绕过中",
        ["Hooking"] = "挂钩中",
        ["Patching"] = "修补中",
        ["Scanning"] = "扫描中",
        ["Executing"] = "执行中",
        ["ON"] = "开",
        ["OFF"] = "关",
        ["Success"] = "成功",
        ["Ready"] = "就绪",
        ["Value"] = "数值",
        ["Amount"] = "数量",
        ["Error"] = "错误",
        ["Failed"] = "失败",
        ["Warning"] = "警告",
        ["Connection Lost"] = "连接丢失",
        ["Invalid Input"] = "无效输入",
        ["Access Denied"] = "访问拒绝",
        ["File Not Found"] = "文件未找到",
        ["Memory Error"] = "内存错误",
        ["Timeout"] = "超时",
        ["Server Error"] = "服务器错误",
        ["Script Error"] = "脚本错误",
        ["Detection"] = "检测到",
        ["Anti-Cheat"] = "反作弊",
        ["Automation"] = "自动化",
        ["Fun"] = "娱乐",
        ["Information"] = "信息",
        ["Visuals"] = "视觉效果",
        ["Teleport"] = "传送",
        ["Main"] = "主要",
        ["Bring Stuff"] = "带来物品",
        ["Player Options"] = "玩家选项",
        ["World Options"] = "世界选项",
        ["Game Options"] = "游戏选项",
        ["Server Options"] = "服务器选项",
        ["Network Options"] = "网络选项",
        ["Graphics Options"] = "图形选项",
        ["Audio Volume"] = "音频音量",
    },

    -- 第五部分：作弊和高级功能
    part5 = {
        ["Cheat"] = "作弊",
        ["Hack"] = "黑客",
        ["Exploit"] = "漏洞",
        ["Script"] = "脚本",
        ["Executor"] = "执行器",
        ["Injector"] = "注入器",
        ["Loader"] = "加载器",
        ["God"] = "上帝",
        ["Mode"] = "模式",
        ["Infinite"] = "无限",
        ["Money"] = "金钱",
        ["Ammo"] = "弹药",
        ["Unlimited"] = "无限",
        ["Clip"] = "穿墙",
        ["Fly"] = "飞行",
        ["Speed"] = "速度",
        ["Jump"] = "跳跃",
        ["Movement"] = "移动",
        ["Walk"] = "行走",
        ["Run"] = "奔跑",
        ["Options"] = "选项",
        ["ESP"] = "透视",
        ["Wallhack"] = "透视",
        ["Aimbot"] = "自瞄",
        ["Auto"] = "自动",
        ["Aim"] = "瞄准",
        ["Silent"] = "静默",
        ["Triggerbot"] = "自动开枪",
        ["Fire"] = "开火",
        ["Game"] = "游戏",
        ["Features"] = "功能",
        ["Unlock"] = "解锁",
        ["Instant"] = "立即",
        ["Win"] = "获胜",
        ["Farm"] = "刷资源",
        ["Collect"] = "收集",
        ["Complete"] = "完成",
        ["Skip"] = "跳过",
        ["Recoil"] = "后坐力",
        ["Rapid"] = "快速",
        ["Kill"] = "击杀",
        ["Fullbright"] = "全亮",
        ["X-Ray"] = "X光",
        ["Night"] = "夜晚",
        ["Vision"] = "视觉",
        ["Fog"] = "雾",
        ["Multiplier"] = "倍数",
        ["Gravity"] = "重力",
        ["Execute"] = "执行",
        ["Inject"] = "注入",
        ["Attach"] = "附加",
        ["Load"] = "加载",
        ["Save"] = "保存",
        ["Refresh"] = "刷新",
        ["Anti"] = "反",
        ["AFK"] = "挂机",
        ["Bypass"] = "绕过",
        ["Safe"] = "安全",
        ["Undetectable"] = "无法检测",
        ["Stealth"] = "隐身",
        ["Rob"] = "抢劫",
        ["Grind"] = "刷级",
        ["Train"] = "训练",
        ["Sell"] = "出售",
        ["Buy"] = "购买",
        ["Advanced"] = "高级",
        ["Premium"] = "高级",
        ["VIP"] = "VIP",
        ["Beta"] = "测试版",
        ["Experimental"] = "实验性",
        ["Developer"] = "开发者",
        ["Debug"] = "调试",
        ["Console"] = "控制台",
        ["Command"] = "命令",
        ["Interface"] = "界面",
        ["Theme"] = "主题",
        ["Color"] = "颜色",
        ["Background"] = "背景",
        ["Transparency"] = "透明度",
        ["Style"] = "样式",
        ["Config"] = "配置",
        ["Settings"] = "设置",
        ["Preferences"] = "偏好",
        ["Customization"] = "自定义",
        ["Profile"] = "资料",
        ["Account"] = "账户",
        ["Login"] = "登录",
        ["Register"] = "注册",
        ["Password"] = "密码",
        ["Username"] = "用户名",
        ["Email"] = "邮箱",
        ["Verify"] = "验证",
        ["Authenticate"] = "认证",
        ["License"] = "许可证",
        ["Key"] = "密钥",
        ["Subscription"] = "订阅",
        ["Payment"] = "支付",
        ["Free"] = "免费",
        ["Paid"] = "付费",
        ["Trial"] = "试用",
        ["Version"] = "版本",
        ["Update"] = "更新",
        ["Download"] = "下载",
        ["Install"] = "安装",
        ["Uninstall"] = "卸载",
        ["Patch"] = "补丁",
        ["Fix"] = "修复",
        ["Bug"] = "漏洞",
        ["Crash"] = "崩溃",
        ["Lag"] = "延迟",
        ["Ping"] = "ping值",
        ["FPS"] = "帧率",
    },

    -- 新增：脚本UI常用词汇
    part6 = {
        ["Execute Script"] = "执行脚本",
        ["Script Hub"] = "脚本中心",
        ["Scripts"] = "脚本",
        ["Universal"] = "通用",
        ["Local"] = "本地",
        ["Remote"] = "远程",
        ["Rejoin"] = "重新加入",
        ["Server Hop"] = "切换服务器",
        ["Re-execute"] = "重新执行",
        ["Destroy GUI"] = "销毁界面",
        ["Credits"] = "制作人员",
        ["Discord"] = "Discord",
        ["Telegram"] = "Telegram",
        ["Website"] = "网站",
        ["Support"] = "支持",
        ["Documentation"] = "文档",
        ["Changelog"] = "更新日志",
        ["Credits"] = "鸣谢",
        ["About"] = "关于",
        ["Close"] = "关闭",
        ["Exit"] = "退出",
        ["Minimize"] = "最小化",
        ["Maximize"] = "最大化",
        ["Drag"] = "拖动",
        ["Drag Me"] = "拖动我",
        ["Position"] = "位置",
        ["Size"] = "大小",
        ["Scale"] = "缩放",
        ["Rotation"] = "旋转",
        ["Opacity"] = "不透明度",
        ["Blur"] = "模糊",
        ["Roundness"] = "圆角",
        ["Shadow"] = "阴影",
        ["Gradient"] = "渐变",
        ["Border"] = "边框",
        ["Margin"] = "边距",
        ["Padding"] = "内边距",
        ["Spacing"] = "间距",
        ["Alignment"] = "对齐",
        ["Center"] = "居中",
        ["Left"] = "左对齐",
        ["Right"] = "右对齐",
        ["Top"] = "顶部",
        ["Bottom"] = "底部",
        ["Middle"] = "中间",
        ["Auto"] = "自动",
        ["Hidden"] = "隐藏",
        ["Visible"] = "可见",
        ["Locked"] = "锁定",
        ["Unlocked"] = "解锁",
        ["Protected"] = "受保护",
        ["Whitelist"] = "白名单",
        ["Blacklist"] = "黑名单",
        ["Admin"] = "管理员",
        ["Moderator"] = "版主",
        ["User"] = "用户",
        ["Guest"] = "游客",
    }
}

-- 性能优化配置
local CONFIG = {
    DEBUG_MODE = false, -- 关闭调试输出提高性能
    BATCH_SIZE = 50, -- 每帧处理的最大对象数
    DELAY_BETWEEN_BATCHES = 0.01, -- 批次间延迟
    MAX_TRANSLATION_LENGTH = 100, -- 最大翻译文本长度
    ENABLE_PRIORITY_QUEUE = true, -- 启用优先级队列
}

-- 翻译缓存
local translationCache = {}
local originalTexts = {}
local isTranslating = false
local mainUI = nil
local connections = {}
local processingQueue = {}
local isProcessing = false

-- 安全的执行函数
local function safeCall(func, errorMessage)
    local success, result = pcall(func)
    if not success then
        if CONFIG.DEBUG_MODE then
            warn("[汉化工具] " .. errorMessage .. ": " .. tostring(result))
        end
        return nil
    end
    return result
end

-- 优化的翻译函数
local function translateText(text)
    if type(text) ~= "string" or text == "" or #text > CONFIG.MAX_TRANSLATION_LENGTH then
        return text
    end
    
    -- 检查缓存
    if translationCache[text] then
        return translationCache[text]
    end
    
    local translated = text
    
    -- 只处理包含字母的文本（避免处理数字、符号等）
    if not string.match(text, "%a") then
        translationCache[text] = translated
        return translated
    end
    
    -- 优化的翻译查找
    for _, dictPart in pairs(translationDictParts) do
        for eng, chn in pairs(dictPart) do
            if #eng > 2 and string.find(text, eng, 1, true) then -- 使用简单查找而非模式匹配
                translated = string.gsub(translated, eng:gsub("([^%w])", "%%%1"), chn)
            end
        end
    end
    
    -- 缓存结果
    translationCache[text] = translated
    
    return translated
end

-- 存储原始文本
local function storeOriginalText(object, property, value)
    if not originalTexts[object] then
        originalTexts[object] = {}
    end
    originalTexts[object][property] = value
end

-- 处理单个GUI对象（优化版）
local function processGUIObject(obj)
    if not obj or not obj.Parent then
        return
    end
    
    -- 检查对象是否已经被处理过
    if originalTexts[obj] then
        return
    end
    
    local textToTranslate = nil
    local propertyToTranslate = nil
    
    -- 处理文本属性
    if obj:IsA("TextLabel") or obj:IsA("TextButton") then
        local text = obj.Text
        if text and text ~= "" and #text <= CONFIG.MAX_TRANSLATION_LENGTH then
            textToTranslate = text
            propertyToTranslate = "Text"
        end
    elseif obj:IsA("TextBox") then
        local text = obj.Text
        local placeholder = obj.PlaceholderText
        
        if text and text ~= "" and #text <= CONFIG.MAX_TRANSLATION_LENGTH then
            textToTranslate = text
            propertyToTranslate = "Text"
        elseif placeholder and placeholder ~= "" and #placeholder <= CONFIG.MAX_TRANSLATION_LENGTH then
            textToTranslate = placeholder
            propertyToTranslate = "PlaceholderText"
        end
    end
    
    if textToTranslate and propertyToTranslate then
        local translated = translateText(textToTranslate)
        if translated ~= textToTranslate then
            storeOriginalText(obj, propertyToTranslate, textToTranslate)
            obj[propertyToTranslate] = translated
        end
    end
end

-- 批量处理队列
local function processQueueBatch()
    if not isTranslating or #processingQueue == 0 then
        isProcessing = false
        return
    end
    
    local processed = 0
    local startTime = tick()
    
    while processed < CONFIG.BATCH_SIZE and #processingQueue > 0 do
        local obj = table.remove(processingQueue, 1)
        if obj and obj.Parent then
            processGUIObject(obj)
            processed = processed + 1
        end
        
        -- 检查时间，避免单帧占用太久
        if tick() - startTime > 0.016 then -- 约1帧时间
            break
        end
    end
    
    -- 如果队列还有内容，安排下一批处理
    if #processingQueue > 0 then
        delay(CONFIG.DELAY_BETWEEN_BATCHES, processQueueBatch)
    else
        isProcessing = false
    end
end

-- 添加到处理队列
local function addToProcessingQueue(obj)
    if not obj or not obj.Parent then
        return
    end
    
    -- 避免重复添加
    for _, queuedObj in ipairs(processingQueue) do
        if queuedObj == obj then
            return
        end
    end
    
    table.insert(processingQueue, obj)
    
    if not isProcessing and isTranslating then
        isProcessing = true
        spawn(processQueueBatch)
    end
end

-- 优化的递归处理函数
local function collectGUIObjects(parent, collection)
    if not parent or not parent.Parent then
        return
    end
    
    for _, child in ipairs(parent:GetChildren()) do
        if child:IsA("TextLabel") or child:IsA("TextButton") or child:IsA("TextBox") then
            table.insert(collection, child)
        end
        
        -- 限制递归深度，避免处理过多嵌套对象
        if #collection < 1000 then
            collectGUIObjects(child, collection)
        end
    end
end

-- 处理CoreGui中的脚本UI（优化版）
local function processCoreGui()
    safeCall(function()
        local objectsToProcess = {}
        collectGUIObjects(CoreGui, objectsToProcess)
        
        -- 分批添加到队列
        for i, obj in ipairs(objectsToProcess) do
            addToProcessingQueue(obj)
        end
        
        return #objectsToProcess
    end, "处理CoreGui失败")
end

-- 处理PlayerGui（优化版）
local function processPlayerGui()
    safeCall(function()
        local objectsToProcess = {}
        collectGUIObjects(playerGui, objectsToProcess)
        
        for i, obj in ipairs(objectsToProcess) do
            addToProcessingQueue(obj)
        end
        
        return #objectsToProcess
    end, "处理PlayerGui失败")
end

-- 优化的GUI监控
local function setupGUIMonitoring()
    safeCall(function()
        -- 使用防抖机制避免频繁处理
        local debounce = false
        
        local function handleNewGUI(descendant)
            if not isTranslating or debounce then
                return
            end
            
            debounce = true
            
            if descendant:IsA("TextLabel") or descendant:IsA("TextButton") or descendant:IsA("TextBox") then
                -- 延迟处理，确保对象完全加载
                delay(0.5, function()
                    addToProcessingQueue(descendant)
                    debounce = false
                end)
            else
                debounce = false
            end
        end
        
        -- 监听PlayerGui
        local playerGuiConnection = playerGui.DescendantAdded:Connect(handleNewGUI)
        table.insert(connections, playerGuiConnection)
        
        -- 监听CoreGui（脚本UI通常在这里）
        local coreGuiConnection = CoreGui.DescendantAdded:Connect(handleNewGUI)
        table.insert(connections, coreGuiConnection)
        
    end, "设置GUI监控失败")
end

-- 恢复原始文本
local function restoreOriginalTexts()
    safeCall(function()
        -- 断开所有连接
        for _, connection in ipairs(connections) do
            connection:Disconnect()
        end
        connections = {}
        
        -- 清空处理队列
        processingQueue = {}
        isProcessing = false
        
        -- 恢复文本
        local restoredCount = 0
        for obj, properties in pairs(originalTexts) do
            if obj and obj.Parent then
                for property, value in pairs(properties) do
                    pcall(function()
                        obj[property] = value
                        restoredCount = restoredCount + 1
                    end)
                end
            end
        end
        
        -- 清空缓存
        originalTexts = {}
        translationCache = {}
        
        return restoredCount
    end, "恢复原始文本失败")
end

-- 开始翻译（优化版）
local function startTranslation()
    safeCall(function()
        -- 清空之前的记录
        originalTexts = {}
        translationCache = {}
        processingQueue = {}
        
        -- 分批处理GUI
        local playerGuiCount = processPlayerGui()
        local coreGuiCount = processCoreGui()
        
        -- 设置监控
        setupGUIMonitoring()
        
        return playerGuiCount, coreGuiCount
    end, "启动翻译失败")
end

-- 创建优化的UI
local function createOptimizedUI()
    return safeCall(function()
        local screenGui = Instance.new("ScreenGui")
        screenGui.Name = "OptimizedTranslatorUI"
        screenGui.ResetOnSpawn = false
        screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
        
        local mainFrame = Instance.new("Frame")
        mainFrame.Size = UDim2.new(0, 280, 0, 180)
        mainFrame.Position = UDim2.new(0, 10, 0, 10)
        mainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 40)
        mainFrame.BorderSizePixel = 0
        mainFrame.Parent = screenGui
        
        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(0, 8)
        corner.Parent = mainFrame
        
        local title = Instance.new("TextLabel")
        title.Size = UDim2.new(1, 0, 0, 35)
        title.Position = UDim2.new(0, 0, 0, 0)
        title.BackgroundColor3 = Color3.fromRGB(45, 45, 55)
        title.Text = "优化汉化工具 v4.0"
        title.TextColor3 = Color3.fromRGB(255, 255, 255)
        title.TextScaled = true
        title.Font = Enum.Font.GothamBold
        title.Parent = mainFrame
        
        local titleCorner = Instance.new("UICorner")
        titleCorner.CornerRadius = UDim.new(0, 8)
        titleCorner.Parent = title
        
        local toggleButton = Instance.new("TextButton")
        toggleButton.Size = UDim2.new(0.85, 0, 0, 40)
        toggleButton.Position = UDim2.new(0.075, 0, 0.25, 0)
        toggleButton.BackgroundColor3 = Color3.fromRGB(65, 105, 225)
        toggleButton.Text = "开启汉化"
        toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        toggleButton.TextScaled = true
        toggleButton.Font = Enum.Font.Gotham
        toggleButton.Parent = mainFrame
        
        local buttonCorner = Instance.new("UICorner")
        buttonCorner.CornerRadius = UDim.new(0, 6)
        buttonCorner.Parent = toggleButton
        
        local statusLabel = Instance.new("TextLabel")
        statusLabel.Size = UDim2.new(0.85, 0, 0, 20)
        statusLabel.Position = UDim2.new(0.075, 0, 0.55, 0)
        statusLabel.BackgroundTransparency = 1
        statusLabel.Text = "状态: 等待中"
        statusLabel.TextColor3 = Color3.fromRGB(200, 200, 255)
        statusLabel.TextScaled = true
        statusLabel.Font = Enum.Font.Gotham
        statusLabel.Parent = mainFrame
        
        local infoLabel = Instance.new("TextLabel")
        infoLabel.Size = UDim2.new(0.85, 0, 0, 15)
        infoLabel.Position = UDim2.new(0.075, 0, 0.75, 0)
        infoLabel.BackgroundTransparency = 1
        infoLabel.Text = "优化性能 - 防卡顿"
        infoLabel.TextColor3 = Color3.fromRGB(150, 150, 180)
        infoLabel.TextScaled = true
        infoLabel.Font = Enum.Font.Gotham
        infoLabel.TextSize = 12
        infoLabel.Parent = mainFrame
        
        -- 按钮事件
        local clickCooldown = false
        toggleButton.MouseButton1Click:Connect(function()
            if clickCooldown then
                return
            end
            clickCooldown = true
            
            isTranslating = not isTranslating
            
            if isTranslating then
                toggleButton.Text = "关闭汉化"
                toggleButton.BackgroundColor3 = Color3.fromRGB(220, 20, 60)
                statusLabel.Text = "状态: 汉化中..."
                startTranslation()
            else
                toggleButton.Text = "开启汉化"
                toggleButton.BackgroundColor3 = Color3.fromRGB(65, 105, 225)
                statusLabel.Text = "状态: 已关闭"
                restoreOriginalTexts()
            end
            
            delay(0.5, function()
                clickCooldown = false
            end)
        end)
        
        screenGui.Parent = playerGui
        return screenGui
    end, "创建优化UI失败")
end

-- 初始化
local function initialize()
    safeCall(function()
        if not playerGui then
            playerGui = player:WaitForChild("PlayerGui")
        end
        
        mainUI = createOptimizedUI()
        
        if mainUI then
            print("====================================")
            print("[优化汉化工具] 加载成功！版本 4.0")
            print("[优化汉化工具] 性能模式: 开启")
            print("[优化汉化工具] 防卡顿机制: 已启用")
            print("====================================")
        end
    end, "初始化失败")
end

-- 延迟启动
wait(3)
print("[优化汉化工具] 正在启动防卡顿汉化工具...")
initialize()
