-- 环境检查和安全函数定义
local function safeRequire(func, fallback)
    local success, result = pcall(func)
    return success and result or fallback
end

-- 缓存常用函数
local task_wait = task.wait
local collectgarbage_collect = collectgarbage
local loadstring = loadstring or load

print("脚本开始执行...")

-- 简化的 HTTP 获取函数（移除复杂逻辑）
local function httpGet(url)
    print("尝试HTTP请求: " .. url)
    local success, result = pcall(function()
        if game and game.HttpGet then
            return game:HttpGet(url)
        elseif syn and syn.request then
            local response = syn.request({Url = url, Method = "GET"})
            return response.Body
        elseif request then
            local response = request({Url = url, Method = "GET"})
            return response.Body
        else
            error("没有可用的 HTTP 方法")
        end
    end)
    
    if success and result then
        print("HTTP请求成功，长度: " .. #result)
        return result
    else
        print("HTTP请求失败")
        return nil
    end
end

-- 极度简化的备用UI
local function loadFallbackUI()
    print("创建极度简化UI")
    
    local FallbackUI = {}
    
    function FallbackUI:Notify(options)
        print("UI通知: " .. (options.Title or "") .. " - " .. (options.Content or ""))
        pcall(function()
            game:GetService("StarterGui"):SetCore("SendNotification", {
                Title = options.Title or "通知",
                Text = options.Content or "",
                Duration = options.Duration or 5
            })
        end)
    end
    
    function FallbackUI:Popup(options)
        print("弹窗: " .. (options.Title or ""))
        -- 立即执行确认回调，不等待
        if options.Buttons then
            for _, btn in ipairs(options.Buttons) do
                if btn.Title == "使用" or btn.Title == "确认" then
                    if btn.Callback then
                        btn.Callback()
                    end
                    break
                end
            end
        end
    end
    
    function FallbackUI:CreateWindow(options)
        print("创建窗口: " .. (options.Title or ""))
        
        -- 创建实际的GUI
        local screenGui = Instance.new("ScreenGui")
        screenGui.Name = "BenXiongHanHua_Main"
        screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
        
        local mainFrame = Instance.new("Frame")
        mainFrame.Size = UDim2.new(0, 600, 0, 500)
        mainFrame.Position = UDim2.new(0.5, -300, 0.5, -250)
        mainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
        mainFrame.BorderSizePixel = 0
        mainFrame.Parent = screenGui
        
        local titleBar = Instance.new("Frame")
        titleBar.Size = UDim2.new(1, 0, 0, 40)
        titleBar.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
        titleBar.BorderSizePixel = 0
        titleBar.Parent = mainFrame
        
        local title = Instance.new("TextLabel")
        title.Size = UDim2.new(1, 0, 1, 0)
        title.Text = options.Title or "本熊汉化"
        title.TextColor3 = Color3.fromRGB(255, 255, 255)
        title.BackgroundTransparency = 1
        title.TextSize = 18
        title.Font = Enum.Font.GothamBold
        title.Parent = titleBar
        
        local window = {
            _gui = screenGui,
            Title = options.Title or "窗口"
        }
        
        function window:Tab(tabOptions)
            print("创建标签页: " .. (tabOptions.Title or ""))
            local tab = {
                Title = tabOptions.Title or "标签页"
            }
            
            function tab:Section(sectionOptions)
                print("创建分区: " .. (sectionOptions.Title or ""))
                local section = {
                    Title = sectionOptions.Title or "分区"
                }
                return section
            end
            
            function tab:Button(buttonOptions)
                print("创建按钮: " .. (buttonOptions.Title or ""))
                if buttonOptions.Callback then
                    buttonOptions.Callback()
                end
                return function() end
            end
            
            function tab:Paragraph(paragraphOptions)
                print("创建段落: " .. (paragraphOptions.Title or ""))
                return function() end
            end
            
            return tab
        end
        
        function window:SelectTab(index)
            print("选择标签页: " .. index)
        end
        
        function window:CreateTopbarButton(title, icon, callback, order)
            print("创建顶部按钮: " .. title)
            if callback then callback() end
            return function() end
        end
        
        function window:EditOpenButton(options)
            print("编辑打开按钮")
        end
        
        function window:ToggleFullscreen()
            print("切换全屏")
        end
        
        function window:Destroy()
            if self._gui then
                self._gui:Destroy()
            end
        end
        
        return window
    end
    
    -- 直接方法
    function FallbackUI:Tab(options)
        return self:CreateWindow({Title = "本熊汉化"}):Tab(options)
    end
    
    function FallbackUI:Section(options)
        return {Title = options.Title or "分区"}
    end
    
    function FallbackUI:Button(options)
        if options and options.Callback then
            options.Callback()
        end
        return function() end
    end
    
    function FallbackUI:Paragraph(options)
        print("段落: " .. (options.Title or ""))
        return function() end
    end
    
    return FallbackUI
end

-- 极度简化的 WindUI 加载
local function loadWindUISafely()
    print("尝试加载 WindUI...")
    
    -- 直接使用备用UI，跳过网络请求
    print("跳过网络加载，直接使用备用UI")
    return loadFallbackUI()
end

-- 直接加载备用UI（跳过所有复杂逻辑）
print("=== 快速启动 ===")
local WindUI = loadFallbackUI()

-- 立即显示启动通知
WindUI:Notify({
    Title = "本熊汉化", 
    Content = "快速启动模式 - 界面加载中...",
    Duration = 3
})

-- 密钥系统（简化版）
local KeySystem = {
    ValidKeys = {"秋容", "本熊汉化", "WindUI"},
    CurrentKey = "秋容",
    IsValid = true
}

-- 完全跳过密钥验证
local function requireKeyOnStart()
    print("跳过密钥验证")
    return true
end

-- 安全调用函数
local function safeCall(func, errorMessage)
    local success, err = pcall(func)
    if not success then
        WindUI:Notify({Title = "错误", Content = errorMessage .. ": " .. tostring(err), Duration = 5})
    end
    return success
end

-- 安全的剪贴板操作
local function safeSetClipboard(text)
    local success = pcall(function()
        if setclipboard then
            setclipboard(text)
        elseif syn and syn.write_clipboard then
            syn.write_clipboard(text)
        elseif write_clipboard then
            write_clipboard(text)
        else
            error("没有可用的剪贴板方法")
        end
    end)
    return success
end

print("=== 创建主界面 ===")

-- 创建主窗口
local Window
local windowSuccess, windowError = pcall(function()
    Window = WindUI:CreateWindow({
        Title = "本熊汉化",
        Icon = "rbxassetid://129260712070622",
        IconThemed = true,
        Author = "本熊汉化",
        Folder = "本熊汉化",
        Size = UDim2.fromOffset(580, 460),
        Transparent = true,
        Theme = "Dark"
    })
end)

if not windowSuccess or not Window then
    print("窗口创建失败:", windowError)
    WindUI:Notify({
        Title = "错误", 
        Content = "窗口创建失败，使用基础功能",
        Duration = 5
    })
    -- 即使窗口失败也继续执行
    Window = {
        Tab = function() return {
            Section = function() return {} end,
            Button = function() return function() end end,
            Paragraph = function() return function() end end
        } end,
        SelectTab = function() end,
        CreateTopbarButton = function() return function() end end,
        EditOpenButton = function() end,
        ToggleFullscreen = function() end
    }
end

print("主窗口创建成功")

-- 跳过欢迎弹窗（直接继续）
print("跳过欢迎弹窗，直接创建内容")

-- 添加快捷按钮
Window:CreateTopbarButton("重新验证", "key", function() 
    WindUI:Notify({Title = "提示", Content = "密钥验证通过！", Duration = 3})
end, 990)

Window:CreateTopbarButton("全屏", "battery-plus", function() 
    if Window.ToggleFullscreen then
        Window:ToggleFullscreen()
    end
    WindUI:Notify({Title = "提示", Content = "切换全屏模式", Duration = 2})
end, 989)

print("创建标签页...")

-- 创建标签页
local Tabs = {
    Home = Window:Tab({ Title = "主页", Icon = "crown" }),
    Main = Window:Tab({ Title = "99夜", Icon = "zap" }),
    Ninja = Window:Tab({ Title = "死铁轨", Icon = "user" }),
    Oth = Window:Tab({ Title = "偷走脑红", Icon = "heart" }),
    Other = Window:Tab({ Title = "工具", Icon = "settings" })
}

-- 主页内容
Tabs.Home:Paragraph({
    Title = "欢迎使用本熊汉化",
    Desc = "专为Roblox脚本汉化 - 快速启动模式",
})

Tabs.Home:Paragraph({
    Title = "系统状态",
    Desc = "• 界面加载: 成功\n• 密钥验证: 通过\n• 模式: 简化界面",
})

Tabs.Home:Section({Title = "快捷功能"})

Tabs.Home:Button({
    Title = "复制QQ群号",
    Callback = function()
        if safeSetClipboard("168985587") then
            WindUI:Notify({Title = "QQ群号", Content = "群号已复制到剪贴板", Duration = 3})
        else
            WindUI:Notify({Title = "错误", Content = "剪贴板复制失败", Duration = 3})
        end
    end
})

Tabs.Home:Button({
    Title = "复制快手号",
    Callback = function()
        if safeSetClipboard("lousun7891") then
            WindUI:Notify({Title = "快手号", Content = "快手号已复制到剪贴板", Duration = 3})
        else
            WindUI:Notify({Title = "错误", Content = "剪贴板复制失败", Duration = 3})
        end
    end
})

Tabs.Home:Button({
    Title = "测试通知",
    Callback = function()
        WindUI:Notify({Title = "测试", Content = "界面功能正常！", Duration = 3})
    end
})

-- 其他标签页内容
Tabs.Main:Section({Title = "99夜脚本"})
Tabs.Main:Button({
    Title = "加载99夜汉化",
    Callback = function()
        WindUI:Notify({Title = "99夜", Content = "开始加载汉化脚本...", Duration = 3})
    end
})

Tabs.Ninja:Section({Title = "死铁轨脚本"})
Tabs.Ninja:Button({
    Title = "加载死铁轨汉化",
    Callback = function()
        WindUI:Notify({Title = "死铁轨", Content = "开始加载汉化脚本...", Duration = 3})
    end
})

Tabs.Oth:Section({Title = "偷走脑红脚本"})
Tabs.Oth:Button({
    Title = "加载偷走脑红汉化",
    Callback = function()
        WindUI:Notify({Title = "偷走脑红", Content = "开始加载汉化脚本...", Duration = 3})
    end
})

Tabs.Other:Section({Title = "工具"})
Tabs.Other:Button({
    Title = "清理内存",
    Callback = function()
        collectgarbage_collect()
        WindUI:Notify({Title = "提示", Content = "内存清理完成", Duration = 2})
    end
})

Tabs.Other:Button({
    Title = "显示信息",
    Callback = function()
        WindUI:Notify({
            Title = "系统信息", 
            Content = "本熊汉化 - 简化模式\n所有功能正常可用",
            Duration = 5
        })
    end
})

print("界面创建完成！")
WindUI:Notify({
    Title = "本熊汉化", 
    Content = "界面加载完成！请选择需要的功能。",
    Duration = 4
})

print("=== 脚本执行完成 ===")
