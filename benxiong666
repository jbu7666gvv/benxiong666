local Players = game:GetService("Players")
local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

print("[汉化工具] 基础服务加载完成 - PlayerGui: " .. tostring(playerGui))

-- 调试工具函数
local function countTable(t)
    local count = 0
    for _ in pairs(t) do
        count = count + 1
    end
    return count
end

local function getMemoryUsage()
    return math.floor(collectgarbage("count") / 1024) .. "MB"
end

print("[汉化工具] 跳过大型词典生成，使用精简核心词典")

-- 只使用核心精简词典（避免内存和性能问题）
local translationDictParts = {
    -- 第一部分：核心游戏对象
    part1 = {
        ["Player"] = "玩家",
        ["NPC"] = "NPC",
        ["Enemy"] = "敌人",
        ["Boss"] = "首领",
        ["Vehicle"] = "载具",
        ["Pet"] = "宠物",
        ["Building"] = "建筑",
        ["Tree"] = "树木",
        ["Big Tree"] = "大树",
        ["Rock"] = "岩石",
        ["Chest"] = "宝箱",
        ["Loot"] = "战利品",
        ["Resource"] = "资源",
        ["Weapon"] = "武器",
        ["Tool"] = "工具",
        ["Item"] = "物品",
        ["Child"] = "子对象",
        ["Entity"] = "实体",
        ["Map"] = "地图",
        ["Structure"] = "结构",
        ["Base"] = "基地",
        ["House"] = "房子",
        ["Shop"] = "商店",
        ["Market"] = "市场",
        ["Arena"] = "竞技场",
        ["Dungeon"] = "地下城",
        ["Cave"] = "洞穴",
        ["Mountain"] = "山脉",
        ["River"] = "河流",
        ["Lake"] = "湖泊",
        ["Ocean"] = "海洋",
        ["Island"] = "岛屿",
        ["Forest"] = "森林",
        ["Desert"] = "沙漠",
        ["Snow"] = "雪地",
        ["Lava"] = "熔岩",
        ["Sky"] = "天空",
        ["Space"] = "太空",
        ["Flower"] = "花朵",
        ["Campfire"] = "营火",
        ["Reward"] = "奖励",
        ["Drop"] = "掉落",
        ["Material"] = "材料",
        ["Armor"] = "护甲",
        ["Gadget"] = "小工具",
        ["Monster"] = "怪物",
        ["Creature"] = "生物",
        ["Animal"] = "动物",
        ["Model"] = "模型",
        ["Mesh"] = "网格",
        ["Part"] = "部件",
        ["BasePart"] = "基础部件",
        ["Warm Place"] = "温暖地点",
        ["Camp"] = "营地",
        ["Fishing Hut"] = "钓鱼小屋",
    },

    -- 第二部分：游戏机制
    part2 = {
        ["Health"] = "生命值",
        ["Stamina"] = "耐力",
        ["Mana"] = "法力",
        ["Experience"] = "经验",
        ["Level"] = "等级",
        ["Damage"] = "伤害",
        ["Defense"] = "防御",
        ["Critical"] = "暴击",
        ["Dodge"] = "闪避",
        ["Respawn"] = "重生",
        ["Spawn"] = "生成",
        ["Despawn"] = "消失",
        ["Cooldown"] = "冷却",
        ["Buff"] = "增益",
        ["Debuff"] = "减益",
        ["Status Effect"] = "状态效果",
        ["Hitbox"] = "碰撞箱",
        ["Physics"] = "物理",
        ["Collision"] = "碰撞",
        ["Skill"] = "技能",
        ["Talent"] = "天赋",
        ["Perk"] = "特权",
        ["Attack"] = "攻击",
        ["Power"] = "力量",
        ["Strength"] = "力量",
        ["Agility"] = "敏捷",
        ["Intelligence"] = "智力",
        ["Luck"] = "幸运",
        ["Time"] = "时间",
        ["Day"] = "白天",
        ["Night"] = "夜晚",
        ["Weather"] = "天气",
        ["Season"] = "季节",
        ["Temperature"] = "温度",
        ["Hunger"] = "饥饿",
        ["Thirst"] = "口渴",
        ["Warmth"] = "温暖",
        ["Fishing"] = "钓鱼",
        ["Success Rate"] = "成功率",
        ["Animation"] = "动画",
        ["Effect"] = "效果",
        ["Particle"] = "粒子",
        ["Light"] = "光线",
        ["Shadow"] = "阴影",
        ["Texture"] = "纹理",
        ["Sound"] = "声音",
        ["Music"] = "音乐",
    },

    -- 第三部分：界面元素
    part3 = {
        ["Menu"] = "菜单",
        ["Button"] = "按钮",
        ["Slider"] = "滑块",
        ["Toggle"] = "开关",
        ["Dropdown"] = "下拉菜单",
        ["Input"] = "输入框",
        ["Checkbox"] = "复选框",
        ["Keybind"] = "按键绑定",
        ["Color Picker"] = "颜色选择器",
        ["Tab"] = "标签页",
        ["Window"] = "窗口",
        ["Panel"] = "面板",
        ["Notification"] = "通知",
        ["Tooltip"] = "工具提示",
        ["Watermark"] = "水印",
        ["List"] = "列表",
        ["Radio"] = "单选按钮",
        ["Frame"] = "框架",
        ["Label"] = "标签",
        ["Text"] = "文本",
        ["Image"] = "图像",
        ["Icon"] = "图标",
        ["Progress Bar"] = "进度条",
        ["Scroll"] = "滚动",
        ["Grid"] = "网格",
        ["Layout"] = "布局",
        ["Container"] = "容器",
        ["Dialog"] = "对话框",
        ["Popup"] = "弹出窗口",
        ["Alert"] = "警报",
        ["Message"] = "消息",
        ["Chat"] = "聊天",
        ["Inventory"] = "物品栏",
        ["Equipment"] = "装备栏",
        ["Skills"] = "技能栏",
        ["Quests"] = "任务栏",
        ["Minimap"] = "小地图",
        ["Radar"] = "雷达",
        ["Compass"] = "指南针",
        ["HUD"] = "平视显示器",
        ["UI"] = "用户界面",
        ["GUI"] = "图形用户界面",
        ["Submenu"] = "子菜单",
        ["Context Menu"] = "上下文菜单",
        ["Navigation"] = "导航",
        ["Header"] = "头部",
        ["Footer"] = "底部",
        ["Sidebar"] = "侧边栏",
        ["Main Content"] = "主要内容",
    },

    -- 第四部分：状态和核心功能
    part4 = {
        ["Enabled"] = "已启用",
        ["Disabled"] = "已禁用",
        ["Active"] = "活跃中",
        ["Inactive"] = "未激活",
        ["Loading"] = "加载中",
        ["Processing"] = "处理中",
        ["Connecting"] = "连接中",
        ["Injecting"] = "注入中",
        ["Bypassing"] = "绕过中",
        ["Hooking"] = "挂钩中",
        ["Patching"] = "修补中",
        ["Scanning"] = "扫描中",
        ["Executing"] = "执行中",
        ["ON"] = "开",
        ["OFF"] = "关",
        ["Success"] = "成功",
        ["Ready"] = "就绪",
        ["Value"] = "数值",
        ["Amount"] = "数量",
        ["Error"] = "错误",
        ["Failed"] = "失败",
        ["Warning"] = "警告",
        ["Connection Lost"] = "连接丢失",
        ["Invalid Input"] = "无效输入",
        ["Access Denied"] = "访问拒绝",
        ["File Not Found"] = "文件未找到",
        ["Memory Error"] = "内存错误",
        ["Timeout"] = "超时",
        ["Server Error"] = "服务器错误",
        ["Script Error"] = "脚本错误",
        ["Detection"] = "检测到",
        ["Anti-Cheat"] = "反作弊",
        ["Automation"] = "自动化",
        ["Fun"] = "娱乐",
        ["Information"] = "信息",
        ["Visuals"] = "视觉效果",
        ["Teleport"] = "传送",
        ["Main"] = "主要",
        ["Bring Stuff"] = "带来物品",
        ["Player Options"] = "玩家选项",
        ["World Options"] = "世界选项",
        ["Game Options"] = "游戏选项",
        ["Server Options"] = "服务器选项",
        ["Network Options"] = "网络选项",
        ["Graphics Options"] = "图形选项",
        ["Audio Volume"] = "音频音量",
    },

    -- 第五部分：作弊和高级功能
    part5 = {
        ["Cheat"] = "作弊",
        ["Hack"] = "黑客",
        ["Exploit"] = "漏洞",
        ["Script"] = "脚本",
        ["Executor"] = "执行器",
        ["Injector"] = "注入器",
        ["Loader"] = "加载器",
        ["God"] = "上帝",
        ["Mode"] = "模式",
        ["Infinite"] = "无限",
        ["Money"] = "金钱",
        ["Ammo"] = "弹药",
        ["Unlimited"] = "无限",
        ["Clip"] = "穿墙",
        ["Fly"] = "飞行",
        ["Speed"] = "速度",
        ["Jump"] = "跳跃",
        ["Movement"] = "移动",
        ["Walk"] = "行走",
        ["Run"] = "奔跑",
        ["Options"] = "选项",
        ["ESP"] = "透视",
        ["Wallhack"] = "透视",
        ["Aimbot"] = "自瞄",
        ["Auto"] = "自动",
        ["Aim"] = "瞄准",
        ["Silent"] = "静默",
        ["Triggerbot"] = "自动开枪",
        ["Fire"] = "开火",
        ["Game"] = "游戏",
        ["Features"] = "功能",
        ["Unlock"] = "解锁",
        ["Instant"] = "立即",
        ["Win"] = "获胜",
        ["Farm"] = "刷资源",
        ["Collect"] = "收集",
        ["Complete"] = "完成",
        ["Skip"] = "跳过",
        ["Recoil"] = "后坐力",
        ["Rapid"] = "快速",
        ["Kill"] = "击杀",
        ["Fullbright"] = "全亮",
        ["X-Ray"] = "X光",
        ["Night"] = "夜晚",
        ["Vision"] = "视觉",
        ["Fog"] = "雾",
        ["Multiplier"] = "倍数",
        ["Gravity"] = "重力",
        ["Execute"] = "执行",
        ["Inject"] = "注入",
        ["Attach"] = "附加",
        ["Load"] = "加载",
        ["Save"] = "保存",
        ["Refresh"] = "刷新",
        ["Anti"] = "反",
        ["AFK"] = "挂机",
        ["Bypass"] = "绕过",
        ["Safe"] = "安全",
        ["Undetectable"] = "无法检测",
        ["Stealth"] = "隐身",
        ["Rob"] = "抢劫",
        ["Grind"] = "刷级",
        ["Train"] = "训练",
        ["Sell"] = "出售",
        ["Buy"] = "购买",
        ["Advanced"] = "高级",
        ["Premium"] = "高级",
        ["VIP"] = "VIP",
        ["Beta"] = "测试版",
        ["Experimental"] = "实验性",
        ["Developer"] = "开发者",
        ["Debug"] = "调试",
        ["Console"] = "控制台",
        ["Command"] = "命令",
        ["Interface"] = "界面",
        ["Theme"] = "主题",
        ["Color"] = "颜色",
        ["Background"] = "背景",
        ["Transparency"] = "透明度",
        ["Style"] = "样式",
        ["Config"] = "配置",
        ["Settings"] = "设置",
        ["Preferences"] = "偏好",
        ["Customization"] = "自定义",
        ["Profile"] = "资料",
        ["Account"] = "账户",
        ["Login"] = "登录",
        ["Register"] = "注册",
        ["Password"] = "密码",
        ["Username"] = "用户名",
        ["Email"] = "邮箱",
        ["Verify"] = "验证",
        ["Authenticate"] = "认证",
        ["License"] = "许可证",
        ["Key"] = "密钥",
        ["Subscription"] = "订阅",
        ["Payment"] = "支付",
        ["Free"] = "免费",
        ["Paid"] = "付费",
        ["Trial"] = "试用",
        ["Version"] = "版本",
        ["Update"] = "更新",
        ["Download"] = "下载",
        ["Install"] = "安装",
        ["Uninstall"] = "卸载",
        ["Patch"] = "补丁",
        ["Fix"] = "修复",
        ["Bug"] = "漏洞",
        ["Crash"] = "崩溃",
        ["Lag"] = "延迟",
        ["Ping"] = "ping值",
        ["FPS"] = "帧率",
    }
}

print("[汉化工具] 核心词典加载完成，包含 " .. countTable(coreTranslationDict) .. " 个词条")

-- 翻译缓存
local translationCache = {}
local originalTexts = {}
local isTranslating = false
local mainUI = nil
local connection = nil

print("[汉化工具] 变量初始化完成")
print("[汉化工具] 初始内存使用: " .. getMemoryUsage())

-- 安全的执行函数
local function safeCall(func, errorMessage)
    local success, result = pcall(func)
    if not success then
        warn("[汉化工具] " .. errorMessage .. ": " .. tostring(result))
        return nil
    end
    return result
end

-- 优化的翻译函数（使用精简词典）
local function translateText(text)
    if type(text) ~= "string" or text == "" then
        return text
    end
    
    print("[翻译调试] 开始翻译文本: '" .. text .. "'")
    
    -- 检查缓存
    if translationCache[text] then
        print("[翻译调试] 使用缓存翻译: '" .. text .. "' -> '" .. translationCache[text] .. "'")
        return translationCache[text]
    end
    
    local translated = text
    local replaceCount = 0
    
    -- 使用精简词典进行翻译
    for eng, chn in pairs(coreTranslationDict) do
        local original = translated
        translated = string.gsub(translated, eng, chn)
        if original ~= translated then
            replaceCount = replaceCount + 1
            print("[翻译调试] 替换 '" .. eng .. "' -> '" .. chn .. "'")
        end
    end
    
    -- 缓存结果
    translationCache[text] = translated
    
    if translated ~= text then
        print("[翻译调试] 翻译完成: '" .. text .. "' -> '" .. translated .. "' (替换了 " .. replaceCount .. " 处)")
    else
        print("[翻译调试] 无翻译变化: '" .. text .. "'")
    end
    
    return translated
end

-- 存储原始文本
local function storeOriginalText(object, property, value)
    if not originalTexts[object] then
        originalTexts[object] = {}
    end
    originalTexts[object][property] = value
    print("[存储调试] 存储原始文本: " .. tostring(object) .. "." .. property .. " = '" .. value .. "'")
    print("[存储调试] 当前存储对象数: " .. countTable(originalTexts))
end

-- 处理单个GUI对象
local function processGUIObject(obj)
    return safeCall(function()
        if obj:IsA("TextLabel") or obj:IsA("TextButton") or obj:IsA("TextBox") then
            -- 只处理可见的对象
            if obj:IsA("GuiObject") and not obj.Visible then
                print("[GUI处理] 跳过不可见对象: " .. tostring(obj))
                return false
            end
            
            local text = obj.Text
            if text and text ~= "" then
                print("[GUI处理] 处理对象: " .. tostring(obj) .. ", 文本: '" .. text .. "'")
                local translated = translateText(text)
                if translated ~= text then
                    storeOriginalText(obj, "Text", text)
                    obj.Text = translated
                    print("[GUI处理] 文本已更新: '" .. text .. "' -> '" .. translated .. "'")
                    return true
                else
                    print("[GUI处理] 文本无变化: '" .. text .. "'")
                    return false
                end
            else
                print("[GUI处理] 跳过空文本对象: " .. tostring(obj))
                return false
            end
        else
            print("[GUI处理] 跳过非文本对象: " .. tostring(obj) .. " (" .. obj.ClassName .. ")")
            return false
        end
    end, "处理GUI对象失败: " .. tostring(obj))
end

-- 只处理可见的GUI元素
local function processVisibleGUIObjects(parent)
    return safeCall(function()
        print("[可见元素处理] 开始扫描可见元素，父级: " .. tostring(parent))
        local visibleElements = {}
        
        -- 收集可见元素
        local function collectVisibleElements(gui)
            if gui:IsA("GuiObject") then
                if gui.Visible then
                    if gui:IsA("TextLabel") or gui:IsA("TextButton") or gui:IsA("TextBox") then
                        if gui.Text and gui.Text ~= "" then
                            table.insert(visibleElements, gui)
                        end
                    end
                else
                    print("[元素收集] 跳过不可见对象: " .. tostring(gui))
                end
            end
            
            for _, child in ipairs(gui:GetChildren()) do
                collectVisibleElements(child)
            end
        end
        
        collectVisibleElements(parent)
        
        print("[可见元素处理] 找到 " .. #visibleElements .. " 个可见文本元素")
        
        -- 处理可见元素
        local processedCount = 0
        local successCount = 0
        for _, element in ipairs(visibleElements) do
            processedCount = processedCount + 1
            print("[可见元素处理] 处理元素 " .. processedCount .. "/" .. #visibleElements .. ": " .. tostring(element))
            if processGUIObject(element) then
                successCount = successCount + 1
            end
        end
        
        print("[可见元素处理] 完成! 处理了 " .. processedCount .. " 个元素，成功翻译 " .. successCount .. " 个")
        print("[可见元素处理] 当前内存使用: " .. getMemoryUsage())
        print("[可见元素处理] 翻译缓存大小: " .. countTable(translationCache))
        print("[可见元素处理] 原始文本存储大小: " .. countTable(originalTexts))
        
        return successCount
    end, "处理可见GUI对象失败")
end

-- 恢复原始文本
local function restoreOriginalTexts()
    safeCall(function()
        print("[恢复调试] 开始恢复原始文本")
        print("[恢复调试] 当前状态: isTranslating = " .. tostring(isTranslating))
        print("[恢复调试] 连接状态: " .. (connection and "已连接" or "未连接"))
        print("[恢复调试] 需要恢复的对象数: " .. countTable(originalTexts))
        
        -- 确保连接被断开
        if connection then
            connection:Disconnect()
            connection = nil
            print("[恢复调试] 已断开连接监听")
        else
            print("[恢复调试] 连接监听已为空")
        end
        
        -- 恢复文本
        local restoredCount = 0
        for obj, properties in pairs(originalTexts) do
            if obj and obj.Parent then
                for property, value in pairs(properties) do
                    local success = pcall(function()
                        obj[property] = value
                        restoredCount = restoredCount + 1
                        print("[恢复调试] 恢复文本: " .. tostring(obj) .. "." .. property .. " = '" .. value .. "'")
                    end)
                    if not success then
                        warn("[恢复调试] 恢复失败: " .. tostring(obj) .. "." .. property)
                    end
                end
            else
                print("[恢复调试] 跳过无效对象: " .. tostring(obj))
            end
        end
        
        -- 清空缓存
        originalTexts = {}
        translationCache = {}
        
        print("[恢复调试] 恢复完成! 共恢复了 " .. restoredCount .. " 个文本")
        print("[恢复调试] 清空后缓存大小 - 翻译缓存: " .. countTable(translationCache) .. ", 原始文本: " .. countTable(originalTexts))
        print("[恢复调试] 最终内存使用: " .. getMemoryUsage())
        
    end, "恢复原始文本失败")
end

-- 开始翻译（按需翻译）
local function startTranslation()
    safeCall(function()
        print("[翻译启动] 开始翻译流程")
        print("[翻译启动] 当前状态: isTranslating = " .. tostring(isTranslating))
        print("[翻译启动] 当前内存使用: " .. getMemoryUsage())
        
        -- 确保之前的连接被断开
        if connection then
            connection:Disconnect()
            connection = nil
            print("[翻译启动] 已断开旧连接")
        else
            print("[翻译启动] 无旧连接需要断开")
        end
        
        -- 清空之前的记录
        originalTexts = {}
        translationCache = {}
        print("[翻译启动] 已清空缓存和记录")
        
        -- 只翻译当前可见的UI元素
        local processedCount = processVisibleGUIObjects(playerGui)
        
        -- 监听新添加的可见对象
        connection = playerGui.DescendantAdded:Connect(function(descendant)
            print("[后代监听] 检测到新对象: " .. tostring(descendant) .. " (" .. descendant.ClassName .. ")")
            if isTranslating then
                print("[后代监听] 准备处理新对象，延迟0.1秒")
                -- 延迟处理，确保对象已完全加载
                wait(0.1)
                processGUIObject(descendant)
            else
                print("[后代监听] 翻译已关闭，跳过处理")
            end
        end)
        
        print("[翻译启动] 翻译已启动!")
        print("[翻译启动] 连接状态: " .. (connection ~= nil and "已连接" or "未连接"))
        print("[翻译启动] 处理了 " .. tostring(processedCount) .. " 个元素")
        print("[翻译启动] 最终内存使用: " .. getMemoryUsage())
        
    end, "启动翻译失败")
end

-- 创建极简UI
local function createSimpleUI()
    return safeCall(function()
        print("[UI创建] 开始创建用户界面")
        
        local screenGui = Instance.new("ScreenGui")
        screenGui.Name = "SimpleTranslatorUI"
        screenGui.ResetOnSpawn = false
        screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
        
        local mainFrame = Instance.new("Frame")
        mainFrame.Size = UDim2.new(0, 200, 0, 120)
        mainFrame.Position = UDim2.new(0, 10, 0, 10)
        mainFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        mainFrame.BorderSizePixel = 0
        mainFrame.Parent = screenGui
        
        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(0, 6)
        corner.Parent = mainFrame
        
        local title = Instance.new("TextLabel")
        title.Size = UDim2.new(1, 0, 0, 25)
        title.Position = UDim2.new(0, 0, 0, 0)
        title.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        title.Text = "汉化工具 v2.0"
        title.TextColor3 = Color3.fromRGB(255, 255, 255)
        title.TextScaled = true
        title.Font = Enum.Font.Gotham
        title.Parent = mainFrame
        
        local titleCorner = Instance.new("UICorner")
        titleCorner.CornerRadius = UDim.new(0, 6)
        titleCorner.Parent = title
        
        local toggleButton = Instance.new("TextButton")
        toggleButton.Size = UDim2.new(0.8, 0, 0, 35)
        toggleButton.Position = UDim2.new(0.1, 0, 0.25, 0)
        toggleButton.BackgroundColor3 = Color3.fromRGB(65, 105, 225)
        toggleButton.Text = "开启汉化"
        toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        toggleButton.TextScaled = true
        toggleButton.Font = Enum.Font.Gotham
        toggleButton.Parent = mainFrame
        
        local buttonCorner = Instance.new("UICorner")
        buttonCorner.CornerRadius = UDim.new(0, 6)
        buttonCorner.Parent = toggleButton
        
        local statusLabel = Instance.new("TextLabel")
        statusLabel.Size = UDim2.new(0.8, 0, 0, 25)
        statusLabel.Position = UDim2.new(0.1, 0, 0.6, 0)
        statusLabel.BackgroundTransparency = 1
        statusLabel.Text = "状态: 等待"
        statusLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        statusLabel.TextScaled = true
        statusLabel.Font = Enum.Font.Gotham
        statusLabel.Parent = mainFrame
        
        local infoLabel = Instance.new("TextLabel")
        infoLabel.Size = UDim2.new(0.8, 0, 0, 20)
        infoLabel.Position = UDim2.new(0.1, 0, 0.85, 0)
        infoLabel.BackgroundTransparency = 1
        infoLabel.Text = "按需翻译模式"
        infoLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
        infoLabel.TextScaled = true
        infoLabel.Font = Enum.Font.Gotham
        infoLabel.TextSize = 12
        infoLabel.Parent = mainFrame
        
        -- 按钮事件
        toggleButton.MouseButton1Click:Connect(function()
            print("[UI事件] 切换按钮被点击")
            -- 防止快速连续点击
            if toggleButton:GetAttribute("ClickCooldown") then
                print("[UI事件] 点击冷却中，跳过")
                return
            end
            toggleButton:SetAttribute("ClickCooldown", true)
            
            isTranslating = not isTranslating
            print("[UI事件] 切换翻译状态为: " .. tostring(isTranslating))

            if isTranslating then
                print("[UI事件] 开启汉化模式")
                toggleButton.Text = "关闭汉化"
                toggleButton.BackgroundColor3 = Color3.fromRGB(220, 20, 60)
                statusLabel.Text = "状态: 汉化中"
                startTranslation()
            else
                print("[UI事件] 关闭汉化模式")
                toggleButton.Text = "开启汉化"
                toggleButton.BackgroundColor3 = Color3.fromRGB(65, 105, 225)
                statusLabel.Text = "状态: 已关闭"
                restoreOriginalTexts()
            end
            
            -- 0.5秒后解除点击冷却
            delay(0.5, function()
                toggleButton:SetAttribute("ClickCooldown", false)
                print("[UI事件] 点击冷却解除")
            end)
        end)
        
        screenGui.Parent = playerGui
        print("[UI创建] 用户界面创建完成")
        return screenGui
    end, "创建UI失败")
end

-- 初始化
local function initialize()
    safeCall(function()
        print("[初始化] 开始初始化汉化工具")
        print("[初始化] 当前内存使用: " .. getMemoryUsage())
        
        if not playerGui then
            print("[初始化] 等待PlayerGui...")
            playerGui = player:WaitForChild("PlayerGui")
            print("[初始化] PlayerGui已就绪: " .. tostring(playerGui))
        end
        
        print("[初始化] 创建用户界面...")
        mainUI = createSimpleUI()
        
        if mainUI then
            print("[初始化] 汉化工具加载成功!")
            print("[初始化] 使用精简词典，包含 " .. countTable(coreTranslationDict) .. " 个核心词条")
            print("[初始化] 最终内存使用: " .. getMemoryUsage())
        else
            warn("[初始化] UI创建失败")
        end
        
        print("[初始化] 完成!")
        
    end, "初始化失败")
end

-- 分步延迟启动
print("[启动] 等待2秒让游戏稳定...")
wait(2)
print("[启动] 开始初始化优化版汉化工具...")
print("[启动] 当前内存使用: " .. getMemoryUsage())
initialize()

-- 定期状态报告
while true do
    wait(30) -- 每30秒报告一次状态
    print("[状态报告] === 汉化工具状态 ===")
    print("[状态报告] 翻译状态: " .. (isTranslating and "开启" or "关闭"))
    print("[状态报告] 连接状态: " .. (connection and "已连接" or "未连接"))
    print("[状态报告] 翻译缓存大小: " .. countTable(translationCache))
    print("[状态报告] 原始文本存储: " .. countTable(originalTexts))
    print("[状态报告] 内存使用: " .. getMemoryUsage())
    print("[状态报告] ====================")
end
