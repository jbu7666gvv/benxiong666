local Players = game:GetService("Players")
local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

local translationDict = {
    ["Main"] = "主页",
}

local originalTexts = {}
local isTranslating = false
local mainUI = nil
local connection = nil

-- 安全的执行函数
local function safeCall(func, errorMessage)
    local success, result = pcall(func)
    if not success then
        warn("[汉化工具] " .. errorMessage .. ": " .. tostring(result))
        return nil
    end
    return result
end

-- 创建极简UI
local function createSimpleUI()
    return safeCall(function()
        local screenGui = Instance.new("ScreenGui")
        screenGui.Name = "SimpleTranslatorUI"
        screenGui.ResetOnSpawn = false
        screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
        
        local mainFrame = Instance.new("Frame")
        mainFrame.Size = UDim2.new(0, 180, 0, 100)
        mainFrame.Position = UDim2.new(0, 10, 0, 10)
        mainFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        mainFrame.BorderSizePixel = 0
        mainFrame.Parent = screenGui
        
        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(0, 6)
        corner.Parent = mainFrame
        
        local title = Instance.new("TextLabel")
        title.Size = UDim2.new(1, 0, 0, 25)
        title.Position = UDim2.new(0, 0, 0, 0)
        title.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        title.Text = "汉化工具"
        title.TextColor3 = Color3.fromRGB(255, 255, 255)
        title.TextScaled = true
        title.Font = Enum.Font.Gotham
        title.Parent = mainFrame
        
        local titleCorner = Instance.new("UICorner")
        titleCorner.CornerRadius = UDim.new(0, 6)
        titleCorner.Parent = title
        
        local toggleButton = Instance.new("TextButton")
        toggleButton.Size = UDim2.new(0.8, 0, 0, 35)
        toggleButton.Position = UDim2.new(0.1, 0, 0.3, 0)
        toggleButton.BackgroundColor3 = Color3.fromRGB(65, 105, 225)
        toggleButton.Text = "开启汉化"
        toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        toggleButton.TextScaled = true
        toggleButton.Font = Enum.Font.Gotham
        toggleButton.Parent = mainFrame
        
        local buttonCorner = Instance.new("UICorner")
        buttonCorner.CornerRadius = UDim.new(0, 6)
        buttonCorner.Parent = toggleButton
        
        local statusLabel = Instance.new("TextLabel")
        statusLabel.Size = UDim2.new(0.8, 0, 0, 25)
        statusLabel.Position = UDim2.new(0.1, 0, 0.7, 0)
        statusLabel.BackgroundTransparency = 1
        statusLabel.Text = "状态: 等待"
        statusLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        statusLabel.TextScaled = true
        statusLabel.Font = Enum.Font.Gotham
        statusLabel.Parent = mainFrame
        
        -- 按钮事件
        toggleButton.MouseButton1Click:Connect(function()
            -- 防止快速连续点击
            if toggleButton:GetAttribute("ClickCooldown") then
                return
            end
            toggleButton:SetAttribute("ClickCooldown", true)
            
            isTranslating = not isTranslating
            
            if isTranslating then
                toggleButton.Text = "关闭汉化"
                statusLabel.Text = "状态: 汉化中"
                startTranslation()
            else
                toggleButton.Text = "开启汉化"
                statusLabel.Text = "状态: 已关闭"
                restoreOriginalTexts()
            end
            
            -- 0.5秒后解除点击冷却
            delay(0.5, function()
                toggleButton:SetAttribute("ClickCooldown", false)
            end)
        end)
        
        screenGui.Parent = playerGui
        return screenGui
    end, "创建UI失败")
end

-- 优化的翻译函数
local function translateText(text)
    if type(text) ~= "string" or text == "" then
        return text
    end
    
    local translated = text
    -- 限制循环次数，避免性能问题
    local count = 0
    for eng, chn in pairs(translationDict) do
        if count > 500 then break end -- 安全限制
        translated = string.gsub(translated, eng, chn)
        count = count + 1
    end
    
    return translated
end

-- 存储原始文本
local function storeOriginalText(object, property, value)
    if not originalTexts[object] then
        originalTexts[object] = {}
    end
    originalTexts[object][property] = value
end

-- 处理GUI对象
local function processGUIObject(obj)
    safeCall(function()
        if obj:IsA("TextLabel") or obj:IsA("TextButton") or obj:IsA("TextBox") then
            local text = obj.Text
            if text and text ~= "" then
                local translated = translateText(text)
                if translated ~= text then
                    storeOriginalText(obj, "Text", text)
                    obj.Text = translated
                end
            end
        end
    end, "处理GUI对象失败: " .. tostring(obj))
end

-- 递归处理GUI
local function processAllGUIObjects(parent)
    safeCall(function()
        for _, child in ipairs(parent:GetChildren()) do
            processGUIObject(child)
            processAllGUIObjects(child)
        end
    end, "递归处理GUI失败")
end

-- 恢复原始文本
local function restoreOriginalTexts()
    safeCall(function()
        -- 确保连接被断开
        if connection then
            connection:Disconnect()
            connection = nil
        end
        
        for obj, properties in pairs(originalTexts) do
            if obj and obj.Parent then
                for property, value in pairs(properties) do
                    pcall(function()
                        obj[property] = value
                    end)
                end
            end
        end
        originalTexts = {}
        
        print("[汉化工具] 已恢复所有文本，连接状态:", connection == nil and "已断开" or "仍连接")
    end, "恢复原始文本失败")
end

-- 开始翻译
local function startTranslation()
    safeCall(function()
        -- 确保之前的连接被断开
        if connection then
            connection:Disconnect()
            connection = nil
        end
        
        -- 清空之前的记录
        originalTexts = {}
        
        processAllGUIObjects(playerGui)
        
        -- 监听新对象
        connection = playerGui.DescendantAdded:Connect(function(descendant)
            if isTranslating then
                processGUIObject(descendant)
            end
        end)
        
        print("[汉化工具] 翻译已启动，连接状态:", connection ~= nil)
    end, "启动翻译失败")
end

-- 初始化
local function initialize()
    safeCall(function()
        if not playerGui then
            playerGui = player:WaitForChild("PlayerGui")
        end
        
        mainUI = createSimpleUI()
        
        if mainUI then
            print("[汉化工具] 加载成功！")
            -- 正确计算词典条目数
            local count = 0
            for _ in pairs(translationDict) do count = count + 1 end
            print("[汉化工具] 词典条目数:", count)
        else
            warn("[汉化工具] UI创建失败")
        end
    end, "初始化失败")
end

-- 分步延迟启动
wait(1) -- 等待1秒让游戏稳定
print("[汉化工具] 开始初始化...")
wait(1) -- 再等待1秒
initialize()
