-- 全局错误处理
local function globalErrorHandler(err)
    warn("本熊脚本错误: " .. tostring(err))
    if WindUI then
        WindUI:Notify({
            Title = "系统错误",
            Content = "发生错误: " .. tostring(err),
            Duration = 10,
            Color = Color3.fromRGB(255, 0, 0)
        })
    end
end

local success, err = xpcall(function()
    -- 环境检查和安全函数定义
    local function safeRequire(func, fallback)
        local success, result = pcall(func)
        return success and result or fallback
    end

    -- 缓存常用函数
    local task_wait = task.wait
    local task_spawn = task.spawn
    local task_delay = task.delay
    local collectgarbage_collect = collectgarbage

    -- 简单的颜色系统（移除动态效果）
    local ColorSystem = {
        primaryColor = Color3.fromRGB(0, 170, 255),
        successColor = Color3.fromRGB(0, 255, 0),
        errorColor = Color3.fromRGB(255, 0, 0),
        warningColor = Color3.fromRGB(255, 165, 0)
    }

    -- 性能监控和资源管理
    local PerformanceMonitor = {
        maxConcurrentLoads = 2,  -- 最大并发加载数
        currentLoads = 0,
        loadQueue = {}
    }

    function PerformanceMonitor:requestLoad(callback)
        if self.currentLoads < self.maxConcurrentLoads then
            self.currentLoads = self.currentLoads + 1
            callback()
        else
            table.insert(self.loadQueue, callback)
        end
    end

    function PerformanceMonitor:finishLoad()
        self.currentLoads = self.currentLoads - 1
        if #self.loadQueue > 0 then
            local nextCallback = table.remove(self.loadQueue, 1)
            self.currentLoads = self.currentLoads + 1
            nextCallback()
        end
    end

    -- 内存管理
    local MemoryManager = {
        cleanupInterval = 30,  -- 30秒清理一次
        lastCleanup = tick()
    }

    function MemoryManager:autoCleanup()
        local currentTime = tick()
        if currentTime - self.lastCleanup >= self.cleanupInterval then
            collectgarbage("collect")
            self.lastCleanup = currentTime
            
            -- 分步回收内存，避免卡顿
            for i = 1, 3 do
                task_delay(i * 0.2, function()
                    collectgarbage("step", 100)
                end)
            end
        end
    end

    -- 设置自动内存清理
    task_spawn(function()
        while true do
            task_wait(10)  -- 每10秒检查一次
            MemoryManager:autoCleanup()
        end
    end)

    -- 异步 HTTP 获取
    local function httpGetAsync(url, callback)
        task_spawn(function()
            local success, result = pcall(function()
                if game.HttpGet then
                    return game:HttpGet(url, true)
                elseif syn and syn.request then
                    local response = syn.request({
                        Url = url, 
                        Method = "GET",
                        Timeout = 15
                    })
                    return response.Body
                elseif request then
                    local response = request({
                        Url = url, 
                        Method = "GET",
                        Timeout = 15
                    })
                    return response.Body
                else
                    error("没有可用的 HTTP 方法")
                end
            end)
            
            if callback then
                callback(success and result or nil)
            end
        end)
    end

    -- 带重试的异步 HTTP 获取
    local function httpGetWithRetry(url, maxRetries, callback)
        local retries = 0
        
        local function attempt()
            httpGetAsync(url, function(result)
                if result then
                    callback(result)
                else
                    retries = retries + 1
                    if retries <= maxRetries then
                        task_delay(retries * 2, attempt)  -- 指数退避
                    else
                        callback(nil)
                    end
                end
            end)
        end
        
        attempt()
    end

    -- 安全的剪贴板操作
    local function safeSetClipboard(text)
        local success, err = pcall(function()
            if setclipboard then
                setclipboard(text)
            elseif syn and syn.write_clipboard then
                syn.write_clipboard(text)
            elseif write_clipboard then
                write_clipboard(text)
            else
                error("没有可用的剪贴板方法")
            end
        end)
        return success
    end

    -- 安全调用函数
    local function safeCall(func, errorMessage)
        local success, err = pcall(func)
        if not success then
            if WindUI then
                WindUI:Notify({
                    Title = "错误", 
                    Content = errorMessage .. ": " .. tostring(err), 
                    Duration = 5,
                    Color = ColorSystem.errorColor
                })
            end
        end
        return success
    end

    -- 显示加载进度
    local function showLoadingProgress(stage)
        if WindUI then
            WindUI:Notify({
                Title = "加载中",
                Content = "正在加载 " .. stage .. "...",
                Duration = 30,
                Color = ColorSystem.primaryColor
            })
        end
    end

    -- 异步加载脚本
    local function loadScriptAsync(url, scriptName, callback)
        PerformanceMonitor:requestLoad(function()
            showLoadingProgress(scriptName)
            
            httpGetWithRetry(url, 3, function(response)
                if not response or #response < 50 then
                    if WindUI then
                        WindUI:Notify({
                            Title = "错误", 
                            Content = scriptName .. " 内容无效或为空", 
                            Duration = 5,
                            Color = ColorSystem.errorColor
                        })
                    end
                    PerformanceMonitor:finishLoad()
                    if callback then callback(false) end
                    return
                end
                
                local loadedFunction, loadError = loadstring(response)
                if not loadedFunction then
                    if WindUI then
                        WindUI:Notify({
                            Title = "错误", 
                            Content = scriptName .. " 编译错误: " .. tostring(loadError), 
                            Duration = 5,
                            Color = ColorSystem.errorColor
                        })
                    end
                    PerformanceMonitor:finishLoad()
                    if callback then callback(false) end
                    return
                end
                
                -- 异步执行脚本
                task_spawn(function()
                    local executeSuccess, executeError = pcall(loadedFunction)
                    PerformanceMonitor:finishLoad()
                    
                    if executeSuccess then
                        if WindUI then
                            WindUI:Notify({
                                Title = "成功", 
                                Content = scriptName .. " 加载完成", 
                                Duration = 3,
                                Color = ColorSystem.successColor
                            })
                        end
                        if callback then callback(true) end
                    else
                        if WindUI then
                            WindUI:Notify({
                                Title = "错误", 
                                Content = scriptName .. " 执行错误: " .. tostring(executeError), 
                                Duration = 5,
                                Color = ColorSystem.errorColor
                            })
                        end
                        if callback then callback(false) end
                    end
                end)
            end)
        end)
    end

    -- 分批加载脚本
    local function batchLoadScripts(scriptList, batchSize, completeCallback)
        local total = #scriptList
        local loaded = 0
        local batches = math.ceil(total / batchSize)
        
        local function loadBatch(batchIndex)
            local startIndex = (batchIndex - 1) * batchSize + 1
            local endIndex = math.min(batchIndex * batchSize, total)
            
            for i = startIndex, endIndex do
                local scriptInfo = scriptList[i]
                task_delay((i - startIndex) * 0.5, function()  -- 增加到500ms间隔
                    loadScriptAsync(scriptInfo.URL, scriptInfo.Title, function(success)
                        loaded = loaded + 1
                        
                        if loaded == total then
                            if completeCallback then
                                completeCallback()
                            end
                        elseif loaded % batchSize == 0 then
                            -- 批次完成，延迟加载下一批
                            task_delay(1, function()
                                loadBatch(batchIndex + 1)
                            end)
                        end
                    end)
                end)
            end
        end
        
        loadBatch(1)
    end

    -- 性能监控
    local function setupPerformanceMonitor()
        local lastTime = tick()
        local frameCount = 0
        
        game:GetService("RunService").Heartbeat:Connect(function()
            frameCount = frameCount + 1
            local currentTime = tick()
            
            if currentTime - lastTime >= 1 then
                local fps = frameCount / (currentTime - lastTime)
                frameCount = 0
                lastTime = currentTime
                
                -- 如果FPS过低，暂停非关键操作
                if fps < 20 then
                    PerformanceMonitor.maxConcurrentLoads = 1  -- 降低并发数
                else
                    PerformanceMonitor.maxConcurrentLoads = 2  -- 恢复正常
                end
            end
        end)
    end

    -- 异步加载 WindUI 库
    local function loadWindUIAsync(callback)
        showLoadingProgress("UI界面")
        
        httpGetWithRetry("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua", 3, function(windUISource)
            if not windUISource then
                warn("WindUI 加载失败: 无法获取库文件")
                if callback then callback(false) end
                return
            end
            
            local success, result = pcall(function()
                return loadstring(windUISource)()
            end)
            
            if success then
                WindUI = result
                if callback then callback(true) end
            else
                warn("WindUI 加载失败: " .. tostring(result))
                if callback then callback(false) end
            end
        end)
    end

    -- 主初始化函数 - 完全异步版本
    local function initializeApplication()
        showLoadingProgress("核心组件")
        
        -- 设置性能监控
        setupPerformanceMonitor()
        
        -- 立即创建窗口，不等待用户确认（避免阻塞）
        createMainWindow()
        
        -- 异步显示欢迎弹窗（不阻塞主线程）
        task_delay(2, function()
            WindUI:Popup({
                Title = "欢迎使用本熊脚本",
                IconThemed = true,
                Content = "本熊脚本 1.5.8",
                Buttons = {
                    {
                        Title = "知道了",
                        Callback = function() 
                            WindUI:Notify({
                                Title = "欢迎", 
                                Content = "开始使用本熊脚本", 
                                Duration = 2,
                                Color = ColorSystem.successColor
                            })
                        end,
                        Variant = "Primary",
                    }
                }
            })
        end)
    end

    -- 创建主窗口函数 - 优化版本
    local function createMainWindow()
        showLoadingProgress("用户界面")
        
        local Window = WindUI:CreateWindow({
            Title = "本熊脚本 1.5.8",
            IconThemed = true,
            Author = "本熊脚本 1.5.8",
            Folder = "本熊脚本 1.5.8",
            Size = UDim2.fromOffset(600, 500),
            Transparent = true,
            Theme = "Dark",
            User = {
                Enabled = true,
                Callback = function() 
                    if safeSetClipboard("本熊脚本 1.5.8") then
                        WindUI:Notify({
                            Title = "提示", 
                            Content = "已复制作者信息", 
                            Duration = 2,
                            Color = ColorSystem.primaryColor
                        })
                    else
                        WindUI:Notify({
                            Title = "错误", 
                            Content = "剪贴板复制失败", 
                            Duration = 2,
                            Color = ColorSystem.errorColor
                        })
                    end
                end,
                Anonymous = true
            },
            SideBarWidth = 220,
            ScrollBarEnabled = true,
            KeySystem = {
                Key = {"秋容"},
                Note = "谁没目还爱圈钱？",
                URL = "秋容",
                SaveKey = true,
                Theme = "Modern",
                Background = {
                    Type = "Gradient",
                    Color1 = Color3.fromRGB(0, 100, 200),
                    Color2 = Color3.fromRGB(100, 0, 200)
                },
                InputPlaceholder = "请输入密钥...",
                ButtonText = "验证密钥",
                SuccessMessage = "密钥验证成功！欢迎使用本熊脚本",
                ErrorMessage = "密钥无效，请重试",
                ShowHint = true,
                HintText = "谁没目还爱圈钱？",
                Timeout = 8
            }
        })

        -- 创建全屏按钮
        Window:CreateTopbarButton("全屏", "battery-plus", function() 
            Window:ToggleFullscreen()
            WindUI:Notify({
                Title = "提示", 
                Content = "切换全屏模式", 
                Duration = 2,
                Color = ColorSystem.primaryColor
            })
        end, 989)

        -- 优化的标签页创建 - 分批创建避免卡顿
        local tabCreationOrder = {
            "Home", "AutoTranslate", "Man", "Main", "Ninja", "Oth", "General", "FlyAndTeleport", "Other"
        }
        
        local Tabs = {}
        local creationBatchSize = 2  -- 每次只创建2个标签页
        
        local function createTabsBatch(startIndex)
            local endIndex = math.min(startIndex + creationBatchSize - 1, #tabCreationOrder)
            
            for i = startIndex, endIndex do
                local tabName = tabCreationOrder[i]
                local delayTime = (i - startIndex) * 0.5  -- 增加到500ms间隔
                
                task_delay(delayTime, function()
                    local tabConfigs = {
                        Home = { Title = "主页", Icon = "home" },
                        AutoTranslate = { Title = "自动汉化", Icon = "languages" },
                        Man = { Title = "通用脚本汉化", Icon = "zap" },
                        Main = { Title = "99夜脚本汉化", Icon = "zap" },
                        Ninja = { Title = "死铁轨脚本汉化", Icon = "user" },
                        Oth = { Title = "偷走脑红脚本汉化", Icon = "heart" },
                        General = { Title = "通用", Icon = "settings" },
                        FlyAndTeleport = { Title = "甩飞与传送", Icon = "rocket" },
                        Other = { Title = "工具", Icon = "tool" }
                    }
                    
                    if tabConfigs[tabName] then
                        Tabs[tabName] = Window:Tab(tabConfigs[tabName])
                        setupTabContent(Tabs[tabName], tabName)
                    end
                    
                    -- 如果是第一批的最后一个标签页，选择主页
                    if i == endIndex and startIndex == 1 then
                        task_delay(0.5, function()
                            Window:SelectTab(1)
                        end)
                    end
                    
                    -- 创建下一批
                    if i == endIndex and endIndex < #tabCreationOrder then
                        task_delay(1, function()  -- 批次间延迟1秒
                            createTabsBatch(endIndex + 1)
                        end)
                    end
                end)
            end
        end
        
        -- 开始分批创建
        createTabsBatch(1)

        -- 完成通知
        task_delay(3, function()
            WindUI:Notify({
                Title = "本熊脚本 1.5.8", 
                Content = "界面加载完成！", 
                Duration = 4,
                Color = ColorSystem.successColor
            })
        end)
    end

    -- 设置标签页内容
    local function setupTabContent(tab, tabName)
        if tabName == "Home" then
            setupHomeTab(tab)
        elseif tabName == "General" then
            setupGeneralTab(tab)
        elseif tabName == "FlyAndTeleport" then
            setupFlyAndTeleportTab(tab)
        elseif tabName == "AutoTranslate" then
            setupAutoTranslateTab(tab)
        elseif tabName == "Man" then
            setupManTab(tab)
        elseif tabName == "Main" then
            setupMainTab(tab)
        elseif tabName == "Ninja" then
            setupNinjaTab(tab)
        elseif tabName == "Oth" then
            setupOthTab(tab)
        elseif tabName == "Other" then
            setupOtherTab(tab)
        end
    end

    -- 主页标签页设置
    local function setupHomeTab(tab)
        tab:Paragraph({
            Title = "欢迎使用本熊脚本",
            Desc = "为Roblox脚本提供汉化",
        })

        tab:Paragraph({
            Title = "更新内容",
            Desc = "新增99夜Rayfield汉化，恢复之前的ui",
        })

        tab:Section({Title = "信息"})

        local homeButtons = {
            {Title = "复制QQ群号", Desc = "点击复制QQ群号", Content = "1038615008"},
            {Title = "复制快手号", Desc = "点击复制快手号", Content = "3460680158"},
            {Title = "复制老鼠快手号", Desc = "点击复制快手号", Content = "lousun7891"}
        }

        for i, buttonInfo in ipairs(homeButtons) do
            tab:Button({
                Title = buttonInfo.Title,
                Desc = buttonInfo.Desc,
                Callback = function()
                    if safeSetClipboard(buttonInfo.Content) then
                        WindUI:Notify({
                            Title = "成功", 
                            Content = buttonInfo.Title .. "已复制到剪贴板", 
                            Duration = 3,
                            Color = ColorSystem.successColor
                        })
                    else
                        WindUI:Notify({
                            Title = "错误", 
                            Content = "剪贴板复制失败", 
                            Duration = 3,
                            Color = ColorSystem.errorColor
                        })
                    end
                end
            })
        end
    end

    -- 通用标签页设置
    local function setupGeneralTab(tab)
        tab:Section({Title = "通用功能"})
        
        tab:Slider({
            Title = "移速",
            Value = {
                Min = 16,
                Max = 1000,
                Default = 16,
            },
            Increment = 1,
            Callback = function(value)
                task_spawn(function()
                    local Plr = game.Players.LocalPlayer
                    if Plr.Character then
                        local Humanoid = Plr.Character:FindFirstChildOfClass("Humanoid")
                        if Humanoid then
                            Humanoid.WalkSpeed = value
                        end
                    end
                end)
            end
        })
        
        tab:Slider({
            Title = "跳跃",
            Value = {
                Min = 50,
                Max = 200,
                Default = 50,
            },
            Increment = 1,
            Callback = function(value)
                task_spawn(function()
                    if game.Players.LocalPlayer.Character then
                        local humanoid = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
                        if humanoid then
                            humanoid.JumpPower = value
                        end
                    end
                end)
            end
        })
    end

    -- 其他标签页设置函数（保持原有结构）
    local function setupFlyAndTeleportTab(tab)
        tab:Section({Title = "甩飞功能"})

        local flyScripts = {
            {
                Title = "指定甩飞(简易版)",
                Desc = "指定目标甩飞",
                URL = "https://pastefy.app/9SmQXduA/raw"
            },
            {
                Title = "全图甩飞", 
                Desc = "全图范围甩飞",
                URL = "https://pastebin.com/raw/zqyDSUWX"
            }
        }

        for i, scriptInfo in ipairs(flyScripts) do
            tab:Button({
                Title = scriptInfo.Title,
                Desc = scriptInfo.Desc,
                Callback = function()
                    loadScriptAsync(scriptInfo.URL, scriptInfo.Title)
                end
            })
        end
    end

    local function setupAutoTranslateTab(tab)
        tab:Section({Title = "自动汉化"})

        local autoTranslateScripts = {
            {
                Title = "自动汉化",
                Desc = "用于给一些没汉化的脚本汉化，只能对常见的进行汉化",
                URL = "https://raw.githubusercontent.com/jbu7666gvv/zihan/refs/heads/main/zihan"
            }
        }

        for i, scriptInfo in ipairs(autoTranslateScripts) do
            tab:Button({
                Title = scriptInfo.Title,
                Desc = scriptInfo.Desc,
                Callback = function()
                    loadScriptAsync(scriptInfo.URL, scriptInfo.Title)
                end
            })
        end
    end

    -- 其他标签页函数（简化为示例）
    local function setupManTab(tab)
        tab:Section({Title = "通用脚本汉化"})
        -- 具体内容...
    end

    local function setupMainTab(tab)
        tab:Section({Title = "99夜汉化脚本"})
        -- 具体内容...
    end

    local function setupNinjaTab(tab)
        tab:Section({Title = "死铁轨汉化脚本"})
        -- 具体内容...
    end

    local function setupOthTab(tab)
        tab:Section({Title = "偷走脑红汉化脚本"})
        -- 具体内容...
    end

    local function setupOtherTab(tab)
        tab:Section({Title = "系统工具"})

        tab:Button({
            Title = "重新加载界面",
            Desc = "重新加载用户界面",
            Callback = function()
                WindUI:Notify({
                    Title = "提示", 
                    Content = "重新加载界面中...", 
                    Duration = 2,
                    Color = ColorSystem.primaryColor
                })
                
                task_delay(1, function()
                    -- 安全清理和重启逻辑
                    if Window then
                        pcall(function() Window:Destroy() end)
                    end
                    
                    -- 分步垃圾回收
                    for i = 1, 3 do
                        task_delay(i * 0.3, function()
                            collectgarbage("collect")
                        end)
                    end
                    
                    -- 延迟重新初始化
                    task_delay(2, function()
                        initializeApplication()
                    end)
                end)
            end
        })

        tab:Button({
            Title = "清理缓存",
            Desc = "清理系统缓存",
            Callback = function()
                -- 分步清理避免卡顿
                for i = 1, 3 do
                    task_delay(i * 0.2, function()
                        collectgarbage("step", 100)
                    end)
                end
                
                WindUI:Notify({
                    Title = "成功", 
                    Content = "系统缓存已清理", 
                    Duration = 3,
                    Color = ColorSystem.successColor
                })
            end
        })
    end

    -- 主执行流程
    showLoadingProgress("初始化")
    
    -- 异步加载WindUI
    loadWindUIAsync(function(success)
        if success then
            -- WindUI加载成功后初始化应用
            task_delay(0.5, function()  -- 添加延迟避免立即执行
                initializeApplication()
            end)
        else
            warn("WindUI 加载失败，无法继续")
        end
    end)

end, globalErrorHandler)

if not success then
    warn("脚本执行错误: " .. tostring(err))
end
