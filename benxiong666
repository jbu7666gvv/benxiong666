local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- 简化的汉化词典（测试用）
local translationDict = {
    ["Player"] = "玩家",
    ["Settings"] = "设置",
    ["Menu"] = "菜单",
    ["Start"] = "开始",
    ["Stop"] = "停止",
    ["Enable"] = "启用",
    ["Disable"] = "禁用",
    ["OK"] = "确定",
    ["Cancel"] = "取消",
    ["Close"] = "关闭",
    ["Open"] = "打开",
    ["Yes"] = "是",
    ["No"] = "否"
}

-- 存储原始文本
local originalTexts = {}
local isTranslating = false
local mainUI = nil
local colorAnimationConnection = nil

-- 彩虹色序列
local rainbowColors = {
    Color3.fromRGB(255, 0, 0),      -- 红色
    Color3.fromRGB(255, 127, 0),    -- 橙色
    Color3.fromRGB(255, 255, 0),    -- 黄色
    Color3.fromRGB(0, 255, 0),      -- 绿色
    Color3.fromRGB(0, 0, 255),      -- 蓝色
    Color3.fromRGB(75, 0, 130),     -- 靛蓝色
    Color3.fromRGB(148, 0, 211)     -- 紫色
}

-- 霓虹色序列
local neonColors = {
    Color3.fromRGB(255, 0, 255),    -- 粉红
    Color3.fromRGB(0, 255, 255),    -- 青色
    Color3.fromRGB(255, 255, 0),    -- 黄色
    Color3.fromRGB(0, 255, 0),      -- 亮绿
    Color3.fromRGB(255, 0, 0),      -- 亮红
    Color3.fromRGB(0, 0, 255)       -- 亮蓝
}

-- 渐变色序列
local gradientColors = {
    Color3.fromRGB(255, 105, 180),  -- 热粉红
    Color3.fromRGB(65, 105, 225),   -- 皇家蓝
    Color3.fromRGB(50, 205, 50),    -- 石灰绿
    Color3.fromRGB(255, 165, 0),    -- 橙色
    Color3.fromRGB(138, 43, 226),   -- 紫罗兰
    Color3.fromRGB(0, 191, 255)     -- 深天蓝
}

local currentColorScheme = rainbowColors
local currentColorIndex = 1

-- 安全的PCall包装函数
local function safeCall(func, errorMessage)
    local success, result = pcall(func)
    if not success then
        warn(errorMessage .. ": " .. tostring(result))
        return nil
    end
    return result
end

-- 颜色动画函数
local function startColorAnimation(uiElements)
    if colorAnimationConnection then
        colorAnimationConnection:Disconnect()
    end
    
    colorAnimationConnection = RunService.Heartbeat:Connect(function(deltaTime)
        currentColorIndex = (currentColorIndex % #currentColorScheme) + 1
        local currentColor = currentColorScheme[currentColorIndex]
        local nextColorIndex = (currentColorIndex % #currentColorScheme) + 1
        local nextColor = currentColorScheme[nextColorIndex]
        
        -- 创建平滑过渡颜色
        local lerpFactor = math.sin(tick() * 3) * 0.5 + 0.5
        local animatedColor = currentColor:Lerp(nextColor, lerpFactor)
        
        -- 应用颜色到所有UI元素
        for _, element in pairs(uiElements) do
            if element and element.Parent then
                pcall(function()
                    if element:IsA("Frame") or element:IsA("TextButton") then
                        element.BackgroundColor3 = animatedColor
                        
                        -- 创建互补色用于文本
                        local textColor = Color3.new(
                            1 - animatedColor.R,
                            1 - animatedColor.G, 
                            1 - animatedColor.B
                        )
                        
                        -- 如果元素有文本，设置文本颜色
                        if element:IsA("TextButton") or element:IsA("TextLabel") then
                            element.TextColor3 = textColor
                        end
                    end
                end)
            end
        end
    end)
end

-- 停止颜色动画
local function stopColorAnimation()
    if colorAnimationConnection then
        colorAnimationConnection:Disconnect()
        colorAnimationConnection = nil
    end
end

-- 创建彩色UI
local function createColorfulUI()
    return safeCall(function()
        local screenGui = Instance.new("ScreenGui")
        screenGui.Name = "ColorfulTranslatorUI_MrPopCat14"
        screenGui.ResetOnSpawn = false
        screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
        
        -- 主框架
        local mainFrame = Instance.new("Frame")
        mainFrame.Size = UDim2.new(0, 280, 0, 200)
        mainFrame.Position = UDim2.new(0, 20, 0, 20)
        mainFrame.BackgroundColor3 = Color3.fromRGB(255, 105, 180) -- 初始热粉红色
        mainFrame.BorderSizePixel = 0
        mainFrame.Parent = screenGui
        
        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(0, 12)
        corner.Parent = mainFrame
        
        -- 发光效果
        local glow = Instance.new("UIStroke")
        glow.Color = Color3.fromRGB(255, 255, 255)
        glow.Thickness = 3
        glow.Parent = mainFrame
        
        -- 标题
        local title = Instance.new("TextLabel")
        title.Size = UDim2.new(1, 0, 0, 45)
        title.Position = UDim2.new(0, 0, 0, 0)
        title.BackgroundColor3 = Color3.fromRGB(138, 43, 226) -- 初始紫罗兰色
        title.Text = "🌈 自动汉化系统 v2.0 🌈"
        title.TextColor3 = Color3.fromRGB(255, 255, 255)
        title.TextScaled = true
        title.Font = Enum.Font.GothamBold
        title.TextStrokeTransparency = 0.5
        title.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
        title.Parent = mainFrame
        
        local titleCorner = Instance.new("UICorner")
        titleCorner.CornerRadius = UDim.new(0, 12)
        titleCorner.Parent = title
        
        -- 主按钮
        local toggleButton = Instance.new("TextButton")
        toggleButton.Size = UDim2.new(0.85, 0, 0, 55)
        toggleButton.Position = UDim2.new(0.075, 0, 0.25, 0)
        toggleButton.BackgroundColor3 = Color3.fromRGB(65, 105, 225) -- 初始皇家蓝
        toggleButton.Text = "🎯 开启汉化"
        toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        toggleButton.TextScaled = true
        toggleButton.Font = Enum.Font.GothamBold
        toggleButton.TextStrokeTransparency = 0.3
        toggleButton.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
        toggleButton.Parent = mainFrame
        
        local buttonCorner = Instance.new("UICorner")
        buttonCorner.CornerRadius = UDim.new(0, 10)
        buttonCorner.Parent = toggleButton
        
        -- 按钮发光效果
        local buttonGlow = Instance.new("UIStroke")
        buttonGlow.Color = Color3.fromRGB(255, 255, 255)
        buttonGlow.Thickness = 2
        buttonGlow.Parent = toggleButton
        
        -- 状态显示
        local statusLabel = Instance.new("TextLabel")
        statusLabel.Size = UDim2.new(0.85, 0, 0, 50)
        statusLabel.Position = UDim2.new(0.075, 0, 0.6, 0)
        statusLabel.BackgroundTransparency = 0.8
        statusLabel.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
        statusLabel.Text = "✨ 状态: 等待启动 ✨"
        statusLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        statusLabel.TextScaled = true
        statusLabel.TextWrapped = true
        statusLabel.Font = Enum.Font.Gotham
        statusLabel.TextStrokeTransparency = 0.5
        statusLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
        statusLabel.Parent = mainFrame
        
        local statusCorner = Instance.new("UICorner")
        statusCorner.CornerRadius = UDim.new(0, 8)
        statusCorner.Parent = statusLabel
        
        -- 按钮点击事件
        toggleButton.MouseButton1Click:Connect(function()
            isTranslating = not isTranslating
            
            if isTranslating then
                toggleButton.Text = "🔴 关闭汉化"
                statusLabel.Text = "🎨 状态: 汉化进行中... 🎨"
                startTranslation()
            else
                toggleButton.Text = "🎯 开启汉化"
                statusLabel.Text = "✨ 状态: 汉化已关闭 ✨"
                restoreOriginalTexts()
            end
        end)
        
        -- 按钮悬停效果
        toggleButton.MouseEnter:Connect(function()
            local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
            local tween = TweenService:Create(toggleButton, tweenInfo, {Size = UDim2.new(0.88, 0, 0, 58)})
            tween:Play()
        end)
        
        toggleButton.MouseLeave:Connect(function()
            local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
            local tween = TweenService:Create(toggleButton, tweenInfo, {Size = UDim2.new(0.85, 0, 0, 55)})
            tween:Play()
        end)
        
        screenGui.Parent = playerGui
        
        -- 开始颜色动画
        local uiElements = {mainFrame, title, toggleButton}
        startColorAnimation(uiElements)
        
        return screenGui
    end, "创建彩色UI失败")
end

-- 翻译文本
local function translateText(text)
    if type(text) ~= "string" or text == "" then
        return text
    end
    
    local translated = text
    for eng, chn in pairs(translationDict) do
        translated = string.gsub(translated, eng, chn)
    end
    
    return translated
end

-- 存储原始文本
local function storeOriginalText(object, property, value)
    if not originalTexts[object] then
        originalTexts[object] = {}
    end
    originalTexts[object][property] = value
end

-- 处理GUI对象
local function processGUIObject(obj)
    safeCall(function()
        if obj:IsA("TextLabel") or obj:IsA("TextButton") or obj:IsA("TextBox") then
            local text = obj.Text
            if text and text ~= "" then
                local translated = translateText(text)
                if translated ~= text then
                    storeOriginalText(obj, "Text", text)
                    obj.Text = translated
                end
            end
        end
    end, "处理GUI对象失败: " .. obj:GetFullName())
end

-- 递归处理所有GUI对象
local function processAllGUIObjects(parent)
    safeCall(function()
        for _, child in ipairs(parent:GetChildren()) do
            processGUIObject(child)
            processAllGUIObjects(child)
        end
    end, "递归处理GUI失败")
end

-- 恢复原始文本
local function restoreOriginalTexts()
    safeCall(function()
        for obj, properties in pairs(originalTexts) do
            if obj and obj.Parent then
                for property, value in pairs(properties) do
                    pcall(function()
                        obj[property] = value
                    end)
                end
            end
        end
        originalTexts = {}
    end, "恢复原始文本失败")
end

-- 开始翻译
local function startTranslation()
    safeCall(function()
        -- 处理现有GUI
        processAllGUIObjects(playerGui)
        
        -- 监听新创建的GUI对象
        local connection
        connection = playerGui.DescendantAdded:Connect(function(descendant)
            if isTranslating then
                processGUIObject(descendant)
            else
                connection:Disconnect()
            end
        end)
    end, "启动翻译过程失败")
end

-- 初始化系统
local function initialize()
    safeCall(function()
        -- 等待PlayerGui完全加载
        if not playerGui then
            playerGui = player:WaitForChild("PlayerGui")
        end
        
        -- 创建彩色UI
        mainUI = createColorfulUI()
        
        if mainUI then
            print("🌈 彩色自动汉化系统加载成功！")
            print("🎨 动态变色UI已显示在屏幕左上角")
            print("🎯 点击按钮开启/关闭自动汉化")
        else
            warn("❌ 彩色自动汉化系统UI创建失败")
        end
    end, "初始化系统失败")
end

-- 延迟初始化，确保游戏完全加载
local function delayedInitialize()
    safeCall(function()
        -- 等待3秒确保游戏完全加载
        wait(3)
        initialize()
    end, "延迟初始化失败")
end

-- 清理函数
local function cleanup()
    stopColorAnimation()
    if mainUI then
        mainUI:Destroy()
    end
end

-- 游戏退出时清理
game:GetService("UserInputService").WindowFocused:Connect(function()
    -- 窗口获得焦点时恢复动画
    if mainUI and mainUI.Parent then
        local uiElements = {}
        for _, child in ipairs(mainUI:GetDescendants()) do
            if child:IsA("Frame") or child:IsA("TextButton") then
                table.insert(uiElements, child)
            end
        end
        startColorAnimation(uiElements)
    end
end)

game:GetService("UserInputService").WindowFocusReleased:Connect(function()
    -- 窗口失去焦点时暂停动画以节省性能
    stopColorAnimation()
end)

-- 启动系统
delayedInitialize()
